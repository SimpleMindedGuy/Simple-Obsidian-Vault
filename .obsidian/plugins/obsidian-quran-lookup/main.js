/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// surahSlim.json
var require_surahSlim = __commonJS({
  "surahSlim.json"(exports, module2) {
    module2.exports = [
      {
        index: "001",
        title: "Al-Fatiha",
        titleAr: "\u0627\u0644\u0641\u0627\u062A\u062D\u0629",
        count: 7
      },
      {
        index: "002",
        title: "Al-Baqara",
        titleAr: "\u0627\u0644\u0628\u0642\u0631\u0629",
        count: 286
      },
      {
        index: "003",
        title: "Aal-Imran",
        titleAr: "\u0622\u0644 \u0639\u0645\u0631\u0627\u0646",
        count: 200
      },
      {
        index: "004",
        title: "An-Nisaa'",
        titleAr: "\u0627\u0644\u0646\u0633\u0627\u0621",
        count: 176
      },
      {
        index: "005",
        title: "Al-Ma'ida",
        titleAr: "\u0627\u0644\u0645\u0627\u0626\u062F\u0629",
        count: 120
      },
      {
        index: "006",
        title: "Al-An'am",
        titleAr: "\u0627\u0644\u0623\u0646\u0639\u0627\u0645",
        count: 165
      },
      {
        index: "007",
        title: "Al-A'raf",
        titleAr: "\u0627\u0644\u0623\u0639\u0631\u0627\u0641",
        count: 206
      },
      {
        index: "008",
        title: "Al-Anfal",
        titleAr: "\u0627\u0644\u0623\u0646\u0641\u0627\u0644",
        count: 75
      },
      {
        index: "009",
        title: "Al-Tawba",
        titleAr: "\u0627\u0644\u062A\u0648\u0628\u0629",
        count: 129
      },
      {
        index: "010",
        title: "Yunus",
        titleAr: "\u064A\u0648\u0646\u0633",
        count: 109
      },
      {
        index: "011",
        title: "Hud",
        titleAr: "\u0647\u0648\u062F",
        count: 123
      },
      {
        index: "012",
        title: "Yusuf",
        titleAr: "\u064A\u0648\u0633\u0641",
        count: 111
      },
      {
        index: "013",
        title: "Ar-Ra'd",
        titleAr: "\u0627\u0644\u0631\u0639\u062F",
        count: 43
      },
      {
        index: "014",
        title: "Ibrahim",
        titleAr: "\u0625\u0628\u0631\u0627\u0647\u064A\u0645",
        count: 52
      },
      {
        index: "015",
        title: "Al-Hijr",
        titleAr: "\u0627\u0644\u062D\u062C\u0631",
        count: 99
      },
      {
        index: "016",
        title: "An-Nahl",
        titleAr: "\u0627\u0644\u0646\u062D\u0644",
        count: 128
      },
      {
        index: "017",
        title: "Al-Israa",
        titleAr: "\u0627\u0644\u0625\u0633\u0631\u0627\u0621",
        count: 111
      },
      {
        index: "018",
        title: "Al-Kahf",
        titleAr: "\u0627\u0644\u0643\u0647\u0641",
        count: 110
      },
      {
        index: "019",
        title: "Maryam",
        titleAr: "\u0645\u0631\u064A\u0645",
        count: 98
      },
      {
        index: "020",
        title: "Ta-Ha",
        titleAr: "\u0637\u0647",
        count: 135
      },
      {
        index: "021",
        title: "Al-Anbiya",
        titleAr: "\u0627\u0644\u0623\u0646\u0628\u064A\u0627\u0621",
        count: 112
      },
      {
        index: "022",
        title: "Al-Hajj",
        titleAr: "\u0627\u0644\u062D\u062C",
        count: 78
      },
      {
        index: "023",
        title: "Al-Muminun",
        titleAr: "\u0627\u0644\u0645\u0624\u0645\u0646\u0648\u0646",
        count: 118
      },
      {
        index: "024",
        title: "An-Nur",
        titleAr: "\u0627\u0644\u0646\u0648\u0631",
        count: 64
      },
      {
        index: "025",
        title: "Al-Furqan",
        titleAr: "\u0627\u0644\u0641\u0631\u0642\u0627\u0646",
        count: 77
      },
      {
        index: "026",
        title: "Ash-Shuara",
        titleAr: "\u0627\u0644\u0634\u0639\u0631\u0627\u0621",
        count: 227
      },
      {
        index: "027",
        title: "An-Naml",
        titleAr: "\u0627\u0644\u0646\u0645\u0644",
        count: 93
      },
      {
        index: "028",
        title: "Al-Qasas",
        titleAr: "\u0627\u0644\u0642\u0635\u0635",
        count: 88
      },
      {
        index: "029",
        title: "Al-Ankabut",
        titleAr: "\u0627\u0644\u0639\u0646\u0643\u0628\u0648\u062A",
        count: 69
      },
      {
        index: "030",
        title: "Ar-Rum",
        titleAr: "\u0627\u0644\u0631\u0648\u0645",
        count: 60
      },
      {
        index: "031",
        title: "Luqman",
        titleAr: "\u0644\u0642\u0645\u0627\u0646",
        count: 34
      },
      {
        index: "032",
        title: "As-Sajdah",
        titleAr: "\u0627\u0644\u0633\u062C\u062F\u0629",
        count: 30
      },
      {
        index: "033",
        title: "Al-Ahzab",
        titleAr: "\u0627\u0644\u0623\u062D\u0632\u0627\u0628",
        count: 73
      },
      {
        index: "034",
        title: "Saba",
        titleAr: "\u0633\u0628\u0623",
        count: 54
      },
      {
        index: "035",
        title: "Fatir",
        titleAr: "\u0641\u0627\u0637\u0631",
        count: 45
      },
      {
        index: "036",
        title: "Yasin",
        titleAr: "\u064A\u0633",
        count: 83
      },
      {
        index: "037",
        title: "As-Saffat",
        titleAr: "\u0627\u0644\u0635\u0627\u0641\u0627\u062A",
        count: 182
      },
      {
        index: "038",
        title: "Sad",
        titleAr: "\u0635",
        count: 88
      },
      {
        index: "039",
        title: "Az-Zumar",
        titleAr: "\u0627\u0644\u0632\u0645\u0631",
        count: 75
      },
      {
        index: "040",
        title: "Ghafir",
        titleAr: "\u063A\u0627\u0641\u0631",
        count: 85
      },
      {
        index: "041",
        title: "Fussilat",
        titleAr: "\u0641\u0635\u0644\u062A",
        count: 54
      },
      {
        index: "042",
        title: "Ash-Shura",
        titleAr: "\u0627\u0644\u0634\u0648\u0631\u0649",
        count: 53
      },
      {
        index: "043",
        title: "Az-Zukhruf",
        titleAr: "\u0627\u0644\u0632\u062E\u0631\u0641",
        count: 89
      },
      {
        index: "044",
        title: "Ad-Dukhan",
        titleAr: "\u0627\u0644\u062F\u062E\u0627\u0646",
        count: 59
      },
      {
        index: "045",
        title: "Al-Jathiya",
        titleAr: "\u0627\u0644\u062C\u0627\u062B\u064A\u0629",
        count: 37
      },
      {
        index: "046",
        title: "Al-Ahqaf",
        titleAr: "\u0627\u0644\u0623\u062D\u0642\u0627\u0641",
        count: 35
      },
      {
        index: "047",
        title: "Muhammad",
        titleAr: "\u0645\u062D\u0645\u062F",
        count: 38
      },
      {
        index: "048",
        title: "Al-Fath",
        titleAr: "\u0627\u0644\u0641\u062A\u062D",
        count: 29
      },
      {
        index: "049",
        title: "Al-Hujurat",
        titleAr: "\u0627\u0644\u062D\u062C\u0631\u0627\u062A",
        count: 18
      },
      {
        index: "050",
        title: "Qaf",
        titleAr: "\u0642",
        count: 45
      },
      {
        index: "051",
        title: "Az-Zariyat",
        titleAr: "\u0627\u0644\u0630\u0627\u0631\u064A\u0627\u062A",
        count: 60
      },
      {
        index: "052",
        title: "At-Tur",
        titleAr: "\u0627\u0644\u0637\u0648\u0631",
        count: 49
      },
      {
        index: "053",
        title: "An-Najm",
        titleAr: "\u0627\u0644\u0646\u062C\u0645",
        count: 62
      },
      {
        index: "054",
        title: "Al-Qamar",
        titleAr: "\u0627\u0644\u0642\u0645\u0631",
        count: 55
      },
      {
        index: "055",
        title: "Ar-Rahman",
        titleAr: "\u0627\u0644\u0631\u062D\u0645\u0646",
        count: 78
      },
      {
        index: "056",
        title: "Al-Waqia",
        titleAr: "\u0627\u0644\u0648\u0627\u0642\u0639\u0629",
        count: 96
      },
      {
        index: "057",
        title: "Al-Hadid",
        titleAr: "\u0627\u0644\u062D\u062F\u064A\u062F",
        count: 29
      },
      {
        index: "058",
        title: "Al-Mujadilah",
        titleAr: "\u0627\u0644\u0645\u062C\u0627\u062F\u0644\u0629",
        count: 22
      },
      {
        index: "059",
        title: "Al-Hashr",
        titleAr: "\u0627\u0644\u062D\u0634\u0631",
        count: 24
      },
      {
        index: "060",
        title: "Al-Mumtahinah",
        titleAr: "\u0627\u0644\u0645\u0645\u062A\u062D\u0646\u0629",
        count: 13
      },
      {
        index: "061",
        title: "As-Saff",
        titleAr: "\u0627\u0644\u0635\u0641",
        count: 14
      },
      {
        index: "062",
        title: "Al-Jumu'ah",
        titleAr: "\u0627\u0644\u062C\u0645\u0639\u0629",
        count: 11
      },
      {
        index: "063",
        title: "Al-Munafiqun",
        titleAr: "\u0627\u0644\u0645\u0646\u0627\u0641\u0642\u0648\u0646",
        count: 11
      },
      {
        index: "064",
        title: "At-Taghabun",
        titleAr: "\u0627\u0644\u062A\u063A\u0627\u0628\u0646",
        count: 18
      },
      {
        index: "065",
        title: "At-Talaq",
        titleAr: "\u0627\u0644\u0637\u0644\u0627\u0642",
        count: 12
      },
      {
        index: "066",
        title: "At-Tahrim",
        titleAr: "\u0627\u0644\u062A\u062D\u0631\u064A\u0645",
        count: 12
      },
      {
        index: "067",
        title: "Al-Mulk",
        titleAr: "\u0627\u0644\u0645\u0644\u0643",
        count: 30
      },
      {
        index: "068",
        title: "Al-Qalam",
        titleAr: "\u0627\u0644\u0642\u0644\u0645",
        count: 52
      },
      {
        index: "069",
        title: "Al-Haqqah",
        titleAr: "\u0627\u0644\u062D\u0627\u0642\u0629",
        count: 52
      },
      {
        index: "070",
        title: "Al-Ma'arij",
        titleAr: "\u0627\u0644\u0645\u0639\u0627\u0631\u062C",
        count: 44
      },
      {
        index: "071",
        title: "Nuh",
        titleAr: "\u0646\u0648\u062D",
        count: 28
      },
      {
        index: "072",
        title: "Al-Jinn",
        titleAr: "\u0627\u0644\u062C\u0646",
        count: 28
      },
      {
        index: "073",
        title: "Al-Muzzammil",
        titleAr: "\u0627\u0644\u0645\u0632\u0645\u0644",
        count: 20
      },
      {
        index: "074",
        title: "Al-Muddaththir",
        titleAr: "\u0627\u0644\u0645\u062F\u062B\u0631",
        count: 56
      },
      {
        index: "075",
        title: "Al-Qiyamah",
        titleAr: "\u0627\u0644\u0642\u064A\u0627\u0645\u0629",
        count: 40
      },
      {
        index: "076",
        title: "Al-Insan",
        titleAr: "\u0627\u0644\u0625\u0646\u0633\u0627\u0646",
        count: 31
      },
      {
        index: "077",
        title: "Al-Mursalat",
        titleAr: "\u0627\u0644\u0645\u0631\u0633\u0644\u0627\u062A",
        count: 50
      },
      {
        index: "078",
        title: "An-Naba",
        titleAr: "\u0627\u0644\u0646\u0628\u0623",
        count: 40
      },
      {
        index: "079",
        title: "An-Naziat",
        titleAr: "\u0627\u0644\u0646\u0627\u0632\u0639\u0627\u062A",
        count: 46
      },
      {
        index: "080",
        title: "Abasa",
        titleAr: "\u0639\u0628\u0633",
        count: 42
      },
      {
        index: "081",
        title: "At-Takwir",
        titleAr: "\u0627\u0644\u062A\u0643\u0648\u064A\u0631",
        count: 29
      },
      {
        index: "082",
        title: "Al-Infitar",
        titleAr: "\u0627\u0644\u0625\u0646\u0641\u0637\u0627\u0631",
        count: 19
      },
      {
        index: "083",
        title: "Al-Mutaffifin",
        titleAr: "\u0627\u0644\u0645\u0637\u0641\u0641\u064A\u0646",
        count: 36
      },
      {
        index: "084",
        title: "Al-Inshiqaq",
        titleAr: "\u0627\u0644\u0625\u0646\u0634\u0642\u0627\u0642",
        count: 25
      },
      {
        index: "085",
        title: "Al-Buruj",
        titleAr: "\u0627\u0644\u0628\u0631\u0648\u062C",
        count: 22
      },
      {
        index: "086",
        title: "At-Tariq",
        titleAr: "\u0627\u0644\u0637\u0627\u0631\u0642",
        count: 17
      },
      {
        index: "087",
        title: "Al-Ala",
        titleAr: "\u0627\u0644\u0623\u0639\u0644\u0649",
        count: 19
      },
      {
        index: "088",
        title: "Al-Ghashiyah",
        titleAr: "\u0627\u0644\u063A\u0627\u0634\u064A\u0629",
        count: 26
      },
      {
        index: "089",
        title: "Al-Fajr",
        titleAr: "\u0627\u0644\u0641\u062C\u0631",
        count: 30
      },
      {
        index: "090",
        title: "Al-Balad",
        titleAr: "\u0627\u0644\u0628\u0644\u062F",
        count: 20
      },
      {
        index: "091",
        title: "Ash-Shams",
        titleAr: "\u0627\u0644\u0634\u0645\u0633",
        count: 15
      },
      {
        index: "092",
        title: "Al-Lail",
        titleAr: "\u0627\u0644\u0644\u064A\u0644",
        count: 21
      },
      {
        index: "093",
        title: "Ad-Duha",
        titleAr: "\u0627\u0644\u0636\u062D\u0649",
        count: 11
      },
      {
        index: "094",
        title: "Ash-Sharh",
        titleAr: "\u0627\u0644\u0634\u0631\u062D",
        count: 8
      },
      {
        index: "095",
        title: "At-Tin",
        titleAr: "\u0627\u0644\u062A\u064A\u0646",
        count: 8
      },
      {
        index: "096",
        title: "Al-Alaq",
        titleAr: "\u0627\u0644\u0639\u0644\u0642",
        count: 19
      },
      {
        index: "097",
        title: "Al-Qadr",
        titleAr: "\u0627\u0644\u0642\u062F\u0631",
        count: 5
      },
      {
        index: "098",
        title: "Al-Bayinah",
        titleAr: "\u0627\u0644\u0628\u064A\u0646\u0629",
        count: 8
      },
      {
        index: "099",
        title: "Az-Zalzalah",
        titleAr: "\u0627\u0644\u0632\u0644\u0632\u0644\u0629",
        count: 8
      },
      {
        index: "100",
        title: "Al-Adiyat",
        titleAr: "\u0627\u0644\u0639\u0627\u062F\u064A\u0627\u062A",
        count: 11
      },
      {
        index: "101",
        title: "Al-Qariah",
        titleAr: "\u0627\u0644\u0642\u0627\u0631\u0639\u0629",
        count: 11
      },
      {
        index: "102",
        title: "Al-Takathur",
        titleAr: "\u0627\u0644\u062A\u0643\u0627\u062B\u0631",
        count: 8
      },
      {
        index: "103",
        title: "Al-Asr",
        titleAr: "\u0627\u0644\u0639\u0635\u0631",
        count: 3
      },
      {
        index: "104",
        title: "Al-Humazah",
        titleAr: "\u0627\u0644\u0647\u0645\u0632\u0629",
        count: 9
      },
      {
        index: "105",
        title: "Al-Fil",
        titleAr: "\u0627\u0644\u0641\u064A\u0644",
        count: 5
      },
      {
        index: "106",
        title: "Quraish",
        titleAr: "\u0642\u0631\u064A\u0634",
        count: 4
      },
      {
        index: "107",
        title: "Al-Ma'un",
        titleAr: "\u0627\u0644\u0645\u0627\u0639\u0648\u0646",
        count: 7
      },
      {
        index: "108",
        title: "Al-Kauthar",
        titleAr: "\u0627\u0644\u0643\u0648\u062B\u0631",
        count: 3
      },
      {
        index: "109",
        title: "Al-Kafirun",
        titleAr: "\u0627\u0644\u0643\u0627\u0641\u0631\u0648\u0646",
        count: 6
      },
      {
        index: "110",
        title: "An-Nasr",
        titleAr: "\u0627\u0644\u0646\u0635\u0631",
        count: 3
      },
      {
        index: "111",
        title: "Al-Masad",
        titleAr: "\u0627\u0644\u0645\u0633\u062F",
        count: 5
      },
      {
        index: "112",
        title: "Al-Ikhlas",
        titleAr: "\u0627\u0644\u0625\u062E\u0644\u0627\u0635",
        count: 4
      },
      {
        index: "113",
        title: "Al-Falaq",
        titleAr: "\u0627\u0644\u0641\u0644\u0642",
        count: 5
      },
      {
        index: "114",
        title: "An-Nas",
        titleAr: "\u0627\u0644\u0646\u0627\u0633",
        count: 6
      }
    ];
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuranLookupPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/fuse.js/dist/fuse.esm.js
function isArray(value) {
  return !Array.isArray ? getTag(value) === "[object Array]" : Array.isArray(value);
}
var INFINITY = 1 / 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  let result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number";
}
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && getTag(value) == "[object Boolean]";
}
function isObject(value) {
  return typeof value === "object";
}
function isObjectLike(value) {
  return isObject(value) && value !== null;
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isBlank(value) {
  return !value.trim().length;
}
function getTag(value) {
  return value == null ? value === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(value);
}
var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) => `Invalid value for key ${key}`;
var PATTERN_LENGTH_TOO_LARGE = (max) => `Pattern length exceeds max of ${max}.`;
var MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;
var INVALID_KEY_WEIGHT_VALUE = (key) => `Property 'weight' in key '${key}' must be a positive integer`;
var hasOwn = Object.prototype.hasOwnProperty;
var KeyStore = class {
  constructor(keys) {
    this._keys = [];
    this._keyMap = {};
    let totalWeight = 0;
    keys.forEach((key) => {
      let obj = createKey(key);
      totalWeight += obj.weight;
      this._keys.push(obj);
      this._keyMap[obj.id] = obj;
      totalWeight += obj.weight;
    });
    this._keys.forEach((key) => {
      key.weight /= totalWeight;
    });
  }
  get(keyId) {
    return this._keyMap[keyId];
  }
  keys() {
    return this._keys;
  }
  toJSON() {
    return JSON.stringify(this._keys);
  }
};
function createKey(key) {
  let path = null;
  let id = null;
  let src = null;
  let weight = 1;
  let getFn = null;
  if (isString(key) || isArray(key)) {
    src = key;
    path = createKeyPath(key);
    id = createKeyId(key);
  } else {
    if (!hasOwn.call(key, "name")) {
      throw new Error(MISSING_KEY_PROPERTY("name"));
    }
    const name = key.name;
    src = name;
    if (hasOwn.call(key, "weight")) {
      weight = key.weight;
      if (weight <= 0) {
        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
      }
    }
    path = createKeyPath(name);
    id = createKeyId(name);
    getFn = key.getFn;
  }
  return { path, id, weight, src, getFn };
}
function createKeyPath(key) {
  return isArray(key) ? key : key.split(".");
}
function createKeyId(key) {
  return isArray(key) ? key.join(".") : key;
}
function get(obj, path) {
  let list = [];
  let arr = false;
  const deepGet = (obj2, path2, index) => {
    if (!isDefined(obj2)) {
      return;
    }
    if (!path2[index]) {
      list.push(obj2);
    } else {
      let key = path2[index];
      const value = obj2[key];
      if (!isDefined(value)) {
        return;
      }
      if (index === path2.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
        list.push(toString(value));
      } else if (isArray(value)) {
        arr = true;
        for (let i = 0, len = value.length; i < len; i += 1) {
          deepGet(value[i], path2, index + 1);
        }
      } else if (path2.length) {
        deepGet(value, path2, index + 1);
      }
    }
  };
  deepGet(obj, isString(path) ? path.split(".") : path, 0);
  return arr ? list : list[0];
}
var MatchOptions = {
  includeMatches: false,
  findAllMatches: false,
  minMatchCharLength: 1
};
var BasicOptions = {
  isCaseSensitive: false,
  includeScore: false,
  keys: [],
  shouldSort: true,
  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
};
var FuzzyOptions = {
  location: 0,
  threshold: 0.6,
  distance: 100
};
var AdvancedOptions = {
  useExtendedSearch: false,
  getFn: get,
  ignoreLocation: false,
  ignoreFieldNorm: false,
  fieldNormWeight: 1
};
var Config = {
  ...BasicOptions,
  ...MatchOptions,
  ...FuzzyOptions,
  ...AdvancedOptions
};
var SPACE = /[^ ]+/g;
function norm(weight = 1, mantissa = 3) {
  const cache = /* @__PURE__ */ new Map();
  const m = Math.pow(10, mantissa);
  return {
    get(value) {
      const numTokens = value.match(SPACE).length;
      if (cache.has(numTokens)) {
        return cache.get(numTokens);
      }
      const norm2 = 1 / Math.pow(numTokens, 0.5 * weight);
      const n = parseFloat(Math.round(norm2 * m) / m);
      cache.set(numTokens, n);
      return n;
    },
    clear() {
      cache.clear();
    }
  };
}
var FuseIndex = class {
  constructor({
    getFn = Config.getFn,
    fieldNormWeight = Config.fieldNormWeight
  } = {}) {
    this.norm = norm(fieldNormWeight, 3);
    this.getFn = getFn;
    this.isCreated = false;
    this.setIndexRecords();
  }
  setSources(docs = []) {
    this.docs = docs;
  }
  setIndexRecords(records = []) {
    this.records = records;
  }
  setKeys(keys = []) {
    this.keys = keys;
    this._keysMap = {};
    keys.forEach((key, idx) => {
      this._keysMap[key.id] = idx;
    });
  }
  create() {
    if (this.isCreated || !this.docs.length) {
      return;
    }
    this.isCreated = true;
    if (isString(this.docs[0])) {
      this.docs.forEach((doc, docIndex) => {
        this._addString(doc, docIndex);
      });
    } else {
      this.docs.forEach((doc, docIndex) => {
        this._addObject(doc, docIndex);
      });
    }
    this.norm.clear();
  }
  add(doc) {
    const idx = this.size();
    if (isString(doc)) {
      this._addString(doc, idx);
    } else {
      this._addObject(doc, idx);
    }
  }
  removeAt(idx) {
    this.records.splice(idx, 1);
    for (let i = idx, len = this.size(); i < len; i += 1) {
      this.records[i].i -= 1;
    }
  }
  getValueForItemAtKeyId(item, keyId) {
    return item[this._keysMap[keyId]];
  }
  size() {
    return this.records.length;
  }
  _addString(doc, docIndex) {
    if (!isDefined(doc) || isBlank(doc)) {
      return;
    }
    let record = {
      v: doc,
      i: docIndex,
      n: this.norm.get(doc)
    };
    this.records.push(record);
  }
  _addObject(doc, docIndex) {
    let record = { i: docIndex, $: {} };
    this.keys.forEach((key, keyIndex) => {
      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
      if (!isDefined(value)) {
        return;
      }
      if (isArray(value)) {
        let subRecords = [];
        const stack = [{ nestedArrIndex: -1, value }];
        while (stack.length) {
          const { nestedArrIndex, value: value2 } = stack.pop();
          if (!isDefined(value2)) {
            continue;
          }
          if (isString(value2) && !isBlank(value2)) {
            let subRecord = {
              v: value2,
              i: nestedArrIndex,
              n: this.norm.get(value2)
            };
            subRecords.push(subRecord);
          } else if (isArray(value2)) {
            value2.forEach((item, k) => {
              stack.push({
                nestedArrIndex: k,
                value: item
              });
            });
          } else
            ;
        }
        record.$[keyIndex] = subRecords;
      } else if (isString(value) && !isBlank(value)) {
        let subRecord = {
          v: value,
          n: this.norm.get(value)
        };
        record.$[keyIndex] = subRecord;
      }
    });
    this.records.push(record);
  }
  toJSON() {
    return {
      keys: this.keys,
      records: this.records
    };
  }
};
function createIndex(keys, docs, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys.map(createKey));
  myIndex.setSources(docs);
  myIndex.create();
  return myIndex;
}
function parseIndex(data, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const { keys, records } = data;
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys);
  myIndex.setIndexRecords(records);
  return myIndex;
}
function computeScore$1(pattern, {
  errors = 0,
  currentLocation = 0,
  expectedLocation = 0,
  distance = Config.distance,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  const accuracy = errors / pattern.length;
  if (ignoreLocation) {
    return accuracy;
  }
  const proximity = Math.abs(expectedLocation - currentLocation);
  if (!distance) {
    return proximity ? 1 : accuracy;
  }
  return accuracy + proximity / distance;
}
function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
  let indices = [];
  let start = -1;
  let end = -1;
  let i = 0;
  for (let len = matchmask.length; i < len; i += 1) {
    let match = matchmask[i];
    if (match && start === -1) {
      start = i;
    } else if (!match && start !== -1) {
      end = i - 1;
      if (end - start + 1 >= minMatchCharLength) {
        indices.push([start, end]);
      }
      start = -1;
    }
  }
  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
    indices.push([start, i - 1]);
  }
  return indices;
}
var MAX_BITS = 32;
function search(text, pattern, patternAlphabet, {
  location = Config.location,
  distance = Config.distance,
  threshold = Config.threshold,
  findAllMatches = Config.findAllMatches,
  minMatchCharLength = Config.minMatchCharLength,
  includeMatches = Config.includeMatches,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  if (pattern.length > MAX_BITS) {
    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
  }
  const patternLen = pattern.length;
  const textLen = text.length;
  const expectedLocation = Math.max(0, Math.min(location, textLen));
  let currentThreshold = threshold;
  let bestLocation = expectedLocation;
  const computeMatches = minMatchCharLength > 1 || includeMatches;
  const matchMask = computeMatches ? Array(textLen) : [];
  let index;
  while ((index = text.indexOf(pattern, bestLocation)) > -1) {
    let score = computeScore$1(pattern, {
      currentLocation: index,
      expectedLocation,
      distance,
      ignoreLocation
    });
    currentThreshold = Math.min(score, currentThreshold);
    bestLocation = index + patternLen;
    if (computeMatches) {
      let i = 0;
      while (i < patternLen) {
        matchMask[index + i] = 1;
        i += 1;
      }
    }
  }
  bestLocation = -1;
  let lastBitArr = [];
  let finalScore = 1;
  let binMax = patternLen + textLen;
  const mask = 1 << patternLen - 1;
  for (let i = 0; i < patternLen; i += 1) {
    let binMin = 0;
    let binMid = binMax;
    while (binMin < binMid) {
      const score2 = computeScore$1(pattern, {
        errors: i,
        currentLocation: expectedLocation + binMid,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score2 <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }
      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }
    binMax = binMid;
    let start = Math.max(1, expectedLocation - binMid + 1);
    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
    let bitArr = Array(finish + 2);
    bitArr[finish + 1] = (1 << i) - 1;
    for (let j = finish; j >= start; j -= 1) {
      let currentLocation = j - 1;
      let charMatch = patternAlphabet[text.charAt(currentLocation)];
      if (computeMatches) {
        matchMask[currentLocation] = +!!charMatch;
      }
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
      if (i) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }
      if (bitArr[j] & mask) {
        finalScore = computeScore$1(pattern, {
          errors: i,
          currentLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (finalScore <= currentThreshold) {
          currentThreshold = finalScore;
          bestLocation = currentLocation;
          if (bestLocation <= expectedLocation) {
            break;
          }
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }
    const score = computeScore$1(pattern, {
      errors: i + 1,
      currentLocation: expectedLocation,
      expectedLocation,
      distance,
      ignoreLocation
    });
    if (score > currentThreshold) {
      break;
    }
    lastBitArr = bitArr;
  }
  const result = {
    isMatch: bestLocation >= 0,
    score: Math.max(1e-3, finalScore)
  };
  if (computeMatches) {
    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
    if (!indices.length) {
      result.isMatch = false;
    } else if (includeMatches) {
      result.indices = indices;
    }
  }
  return result;
}
function createPatternAlphabet(pattern) {
  let mask = {};
  for (let i = 0, len = pattern.length; i < len; i += 1) {
    const char = pattern.charAt(i);
    mask[char] = (mask[char] || 0) | 1 << len - i - 1;
  }
  return mask;
}
var BitapSearch = class {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    this.options = {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.chunks = [];
    if (!this.pattern.length) {
      return;
    }
    const addChunk = (pattern2, startIndex) => {
      this.chunks.push({
        pattern: pattern2,
        alphabet: createPatternAlphabet(pattern2),
        startIndex
      });
    };
    const len = this.pattern.length;
    if (len > MAX_BITS) {
      let i = 0;
      const remainder = len % MAX_BITS;
      const end = len - remainder;
      while (i < end) {
        addChunk(this.pattern.substr(i, MAX_BITS), i);
        i += MAX_BITS;
      }
      if (remainder) {
        const startIndex = len - MAX_BITS;
        addChunk(this.pattern.substr(startIndex), startIndex);
      }
    } else {
      addChunk(this.pattern, 0);
    }
  }
  searchIn(text) {
    const { isCaseSensitive, includeMatches } = this.options;
    if (!isCaseSensitive) {
      text = text.toLowerCase();
    }
    if (this.pattern === text) {
      let result2 = {
        isMatch: true,
        score: 0
      };
      if (includeMatches) {
        result2.indices = [[0, text.length - 1]];
      }
      return result2;
    }
    const {
      location,
      distance,
      threshold,
      findAllMatches,
      minMatchCharLength,
      ignoreLocation
    } = this.options;
    let allIndices = [];
    let totalScore = 0;
    let hasMatches = false;
    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {
      const { isMatch, score, indices } = search(text, pattern, alphabet, {
        location: location + startIndex,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        includeMatches,
        ignoreLocation
      });
      if (isMatch) {
        hasMatches = true;
      }
      totalScore += score;
      if (isMatch && indices) {
        allIndices = [...allIndices, ...indices];
      }
    });
    let result = {
      isMatch: hasMatches,
      score: hasMatches ? totalScore / this.chunks.length : 1
    };
    if (hasMatches && includeMatches) {
      result.indices = allIndices;
    }
    return result;
  }
};
var BaseMatch = class {
  constructor(pattern) {
    this.pattern = pattern;
  }
  static isMultiMatch(pattern) {
    return getMatch(pattern, this.multiRegex);
  }
  static isSingleMatch(pattern) {
    return getMatch(pattern, this.singleRegex);
  }
  search() {
  }
};
function getMatch(pattern, exp) {
  const matches = pattern.match(exp);
  return matches ? matches[1] : null;
}
var ExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "exact";
  }
  static get multiRegex() {
    return /^="(.*)"$/;
  }
  static get singleRegex() {
    return /^=(.*)$/;
  }
  search(text) {
    const isMatch = text === this.pattern;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InverseExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"$/;
  }
  static get singleRegex() {
    return /^!(.*)$/;
  }
  search(text) {
    const index = text.indexOf(this.pattern);
    const isMatch = index === -1;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var PrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "prefix-exact";
  }
  static get multiRegex() {
    return /^\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^\^(.*)$/;
  }
  search(text) {
    const isMatch = text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InversePrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-prefix-exact";
  }
  static get multiRegex() {
    return /^!\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^!\^(.*)$/;
  }
  search(text) {
    const isMatch = !text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var SuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "suffix-exact";
  }
  static get multiRegex() {
    return /^"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^(.*)\$$/;
  }
  search(text) {
    const isMatch = text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [text.length - this.pattern.length, text.length - 1]
    };
  }
};
var InverseSuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-suffix-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^!(.*)\$$/;
  }
  search(text) {
    const isMatch = !text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var FuzzyMatch = class extends BaseMatch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    super(pattern);
    this._bitapSearch = new BitapSearch(pattern, {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    });
  }
  static get type() {
    return "fuzzy";
  }
  static get multiRegex() {
    return /^"(.*)"$/;
  }
  static get singleRegex() {
    return /^(.*)$/;
  }
  search(text) {
    return this._bitapSearch.searchIn(text);
  }
};
var IncludeMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "include";
  }
  static get multiRegex() {
    return /^'"(.*)"$/;
  }
  static get singleRegex() {
    return /^'(.*)$/;
  }
  search(text) {
    let location = 0;
    let index;
    const indices = [];
    const patternLen = this.pattern.length;
    while ((index = text.indexOf(this.pattern, location)) > -1) {
      location = index + patternLen;
      indices.push([index, location - 1]);
    }
    const isMatch = !!indices.length;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices
    };
  }
};
var searchers = [
  ExactMatch,
  IncludeMatch,
  PrefixExactMatch,
  InversePrefixExactMatch,
  InverseSuffixExactMatch,
  SuffixExactMatch,
  InverseExactMatch,
  FuzzyMatch
];
var searchersLen = searchers.length;
var SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
var OR_TOKEN = "|";
function parseQuery(pattern, options = {}) {
  return pattern.split(OR_TOKEN).map((item) => {
    let query = item.trim().split(SPACE_RE).filter((item2) => item2 && !!item2.trim());
    let results = [];
    for (let i = 0, len = query.length; i < len; i += 1) {
      const queryItem = query[i];
      let found = false;
      let idx = -1;
      while (!found && ++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isMultiMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          found = true;
        }
      }
      if (found) {
        continue;
      }
      idx = -1;
      while (++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isSingleMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          break;
        }
      }
    }
    return results;
  });
}
var MultiMatchSet = /* @__PURE__ */ new Set([FuzzyMatch.type, IncludeMatch.type]);
var ExtendedSearch = class {
  constructor(pattern, {
    isCaseSensitive = Config.isCaseSensitive,
    includeMatches = Config.includeMatches,
    minMatchCharLength = Config.minMatchCharLength,
    ignoreLocation = Config.ignoreLocation,
    findAllMatches = Config.findAllMatches,
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance
  } = {}) {
    this.query = null;
    this.options = {
      isCaseSensitive,
      includeMatches,
      minMatchCharLength,
      findAllMatches,
      ignoreLocation,
      location,
      threshold,
      distance
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.query = parseQuery(this.pattern, this.options);
  }
  static condition(_, options) {
    return options.useExtendedSearch;
  }
  searchIn(text) {
    const query = this.query;
    if (!query) {
      return {
        isMatch: false,
        score: 1
      };
    }
    const { includeMatches, isCaseSensitive } = this.options;
    text = isCaseSensitive ? text : text.toLowerCase();
    let numMatches = 0;
    let allIndices = [];
    let totalScore = 0;
    for (let i = 0, qLen = query.length; i < qLen; i += 1) {
      const searchers2 = query[i];
      allIndices.length = 0;
      numMatches = 0;
      for (let j = 0, pLen = searchers2.length; j < pLen; j += 1) {
        const searcher = searchers2[j];
        const { isMatch, indices, score } = searcher.search(text);
        if (isMatch) {
          numMatches += 1;
          totalScore += score;
          if (includeMatches) {
            const type = searcher.constructor.type;
            if (MultiMatchSet.has(type)) {
              allIndices = [...allIndices, ...indices];
            } else {
              allIndices.push(indices);
            }
          }
        } else {
          totalScore = 0;
          numMatches = 0;
          allIndices.length = 0;
          break;
        }
      }
      if (numMatches) {
        let result = {
          isMatch: true,
          score: totalScore / numMatches
        };
        if (includeMatches) {
          result.indices = allIndices;
        }
        return result;
      }
    }
    return {
      isMatch: false,
      score: 1
    };
  }
};
var registeredSearchers = [];
function register(...args) {
  registeredSearchers.push(...args);
}
function createSearcher(pattern, options) {
  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
    let searcherClass = registeredSearchers[i];
    if (searcherClass.condition(pattern, options)) {
      return new searcherClass(pattern, options);
    }
  }
  return new BitapSearch(pattern, options);
}
var LogicalOperator = {
  AND: "$and",
  OR: "$or"
};
var KeyType = {
  PATH: "$path",
  PATTERN: "$val"
};
var isExpression = (query) => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
var isPath = (query) => !!query[KeyType.PATH];
var isLeaf = (query) => !isArray(query) && isObject(query) && !isExpression(query);
var convertToExplicit = (query) => ({
  [LogicalOperator.AND]: Object.keys(query).map((key) => ({
    [key]: query[key]
  }))
});
function parse(query, options, { auto = true } = {}) {
  const next = (query2) => {
    let keys = Object.keys(query2);
    const isQueryPath = isPath(query2);
    if (!isQueryPath && keys.length > 1 && !isExpression(query2)) {
      return next(convertToExplicit(query2));
    }
    if (isLeaf(query2)) {
      const key = isQueryPath ? query2[KeyType.PATH] : keys[0];
      const pattern = isQueryPath ? query2[KeyType.PATTERN] : query2[key];
      if (!isString(pattern)) {
        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
      }
      const obj = {
        keyId: createKeyId(key),
        pattern
      };
      if (auto) {
        obj.searcher = createSearcher(pattern, options);
      }
      return obj;
    }
    let node = {
      children: [],
      operator: keys[0]
    };
    keys.forEach((key) => {
      const value = query2[key];
      if (isArray(value)) {
        value.forEach((item) => {
          node.children.push(next(item));
        });
      }
    });
    return node;
  };
  if (!isExpression(query)) {
    query = convertToExplicit(query);
  }
  return next(query);
}
function computeScore(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {
  results.forEach((result) => {
    let totalScore = 1;
    result.matches.forEach(({ key, norm: norm2, score }) => {
      const weight = key ? key.weight : null;
      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm2));
    });
    result.score = totalScore;
  });
}
function transformMatches(result, data) {
  const matches = result.matches;
  data.matches = [];
  if (!isDefined(matches)) {
    return;
  }
  matches.forEach((match) => {
    if (!isDefined(match.indices) || !match.indices.length) {
      return;
    }
    const { indices, value } = match;
    let obj = {
      indices,
      value
    };
    if (match.key) {
      obj.key = match.key.src;
    }
    if (match.idx > -1) {
      obj.refIndex = match.idx;
    }
    data.matches.push(obj);
  });
}
function transformScore(result, data) {
  data.score = result.score;
}
function format(results, docs, {
  includeMatches = Config.includeMatches,
  includeScore = Config.includeScore
} = {}) {
  const transformers = [];
  if (includeMatches)
    transformers.push(transformMatches);
  if (includeScore)
    transformers.push(transformScore);
  return results.map((result) => {
    const { idx } = result;
    const data = {
      item: docs[idx],
      refIndex: idx
    };
    if (transformers.length) {
      transformers.forEach((transformer) => {
        transformer(result, data);
      });
    }
    return data;
  });
}
var Fuse = class {
  constructor(docs, options = {}, index) {
    this.options = { ...Config, ...options };
    if (this.options.useExtendedSearch && false) {
      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
    }
    this._keyStore = new KeyStore(this.options.keys);
    this.setCollection(docs, index);
  }
  setCollection(docs, index) {
    this._docs = docs;
    if (index && !(index instanceof FuseIndex)) {
      throw new Error(INCORRECT_INDEX_TYPE);
    }
    this._myIndex = index || createIndex(this.options.keys, this._docs, {
      getFn: this.options.getFn,
      fieldNormWeight: this.options.fieldNormWeight
    });
  }
  add(doc) {
    if (!isDefined(doc)) {
      return;
    }
    this._docs.push(doc);
    this._myIndex.add(doc);
  }
  remove(predicate = () => false) {
    const results = [];
    for (let i = 0, len = this._docs.length; i < len; i += 1) {
      const doc = this._docs[i];
      if (predicate(doc, i)) {
        this.removeAt(i);
        i -= 1;
        len -= 1;
        results.push(doc);
      }
    }
    return results;
  }
  removeAt(idx) {
    this._docs.splice(idx, 1);
    this._myIndex.removeAt(idx);
  }
  getIndex() {
    return this._myIndex;
  }
  search(query, { limit = -1 } = {}) {
    const {
      includeMatches,
      includeScore,
      shouldSort,
      sortFn,
      ignoreFieldNorm
    } = this.options;
    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
    computeScore(results, { ignoreFieldNorm });
    if (shouldSort) {
      results.sort(sortFn);
    }
    if (isNumber(limit) && limit > -1) {
      results = results.slice(0, limit);
    }
    return format(results, this._docs, {
      includeMatches,
      includeScore
    });
  }
  _searchStringList(query) {
    const searcher = createSearcher(query, this.options);
    const { records } = this._myIndex;
    const results = [];
    records.forEach(({ v: text, i: idx, n: norm2 }) => {
      if (!isDefined(text)) {
        return;
      }
      const { isMatch, score, indices } = searcher.searchIn(text);
      if (isMatch) {
        results.push({
          item: text,
          idx,
          matches: [{ score, value: text, norm: norm2, indices }]
        });
      }
    });
    return results;
  }
  _searchLogical(query) {
    const expression = parse(query, this.options);
    const evaluate = (node, item, idx) => {
      if (!node.children) {
        const { keyId, searcher } = node;
        const matches = this._findMatches({
          key: this._keyStore.get(keyId),
          value: this._myIndex.getValueForItemAtKeyId(item, keyId),
          searcher
        });
        if (matches && matches.length) {
          return [
            {
              idx,
              item,
              matches
            }
          ];
        }
        return [];
      }
      const res = [];
      for (let i = 0, len = node.children.length; i < len; i += 1) {
        const child = node.children[i];
        const result = evaluate(child, item, idx);
        if (result.length) {
          res.push(...result);
        } else if (node.operator === LogicalOperator.AND) {
          return [];
        }
      }
      return res;
    };
    const records = this._myIndex.records;
    const resultMap = {};
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (isDefined(item)) {
        let expResults = evaluate(expression, item, idx);
        if (expResults.length) {
          if (!resultMap[idx]) {
            resultMap[idx] = { idx, item, matches: [] };
            results.push(resultMap[idx]);
          }
          expResults.forEach(({ matches }) => {
            resultMap[idx].matches.push(...matches);
          });
        }
      }
    });
    return results;
  }
  _searchObjectList(query) {
    const searcher = createSearcher(query, this.options);
    const { keys, records } = this._myIndex;
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (!isDefined(item)) {
        return;
      }
      let matches = [];
      keys.forEach((key, keyIndex) => {
        matches.push(...this._findMatches({
          key,
          value: item[keyIndex],
          searcher
        }));
      });
      if (matches.length) {
        results.push({
          idx,
          item,
          matches
        });
      }
    });
    return results;
  }
  _findMatches({ key, value, searcher }) {
    if (!isDefined(value)) {
      return [];
    }
    let matches = [];
    if (isArray(value)) {
      value.forEach(({ v: text, i: idx, n: norm2 }) => {
        if (!isDefined(text)) {
          return;
        }
        const { isMatch, score, indices } = searcher.searchIn(text);
        if (isMatch) {
          matches.push({
            score,
            key,
            value: text,
            idx,
            norm: norm2,
            indices
          });
        }
      });
    } else {
      const { v: text, n: norm2 } = value;
      const { isMatch, score, indices } = searcher.searchIn(text);
      if (isMatch) {
        matches.push({ score, key, value: text, norm: norm2, indices });
      }
    }
    return matches;
  }
};
Fuse.version = "6.6.2";
Fuse.createIndex = createIndex;
Fuse.parseIndex = parseIndex;
Fuse.config = Config;
{
  Fuse.parseQuery = parse;
}
{
  register(ExtendedSearch);
}

// main.ts
var EnTranslations = {
  0: "en.ahmedali",
  1: "en.ahmedraza",
  2: "en.arberry",
  3: "en.asad",
  4: "en.daryabadi",
  5: "en.hilali",
  6: "en.pickthall",
  7: "en.qaribullah",
  8: "en.sahih",
  9: "en.sarwar",
  10: "en.yusufali",
  11: "en.maududi",
  12: "en.shakir",
  13: "en.transliteration",
  14: "en.itani"
};
var DEFAULT_SETTINGS = {
  translatorIndex: 5,
  removeParens: true
};
var QuranLookupPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.surahJson = require_surahSlim();
    this.surahList = this.surahJson.map((m) => m.title);
    const options = { keys: ["title"] };
    this.fuse = new Fuse(this.surahJson, options);
    this.addCommand({
      id: "ayah-list-command",
      name: "Retrieve Ayaat",
      editorCallback: async (editor, view) => {
        const ayaat = editor.getSelection().split(" ").filter(Boolean);
        let totalT = "";
        let verseText = "";
        for (const verse of ayaat) {
          let rVerse = verse;
          const surah = verse.split(":")[0];
          if (isNaN(parseInt(surah))) {
            let surahIndex = 0;
            const surahNum = this.fuse.search(surah)[0].item;
            if (surahNum != void 0) {
              surahIndex = parseInt(surahNum.index);
            }
            rVerse = "" + surahIndex + ":" + verse.split(":")[1];
          }
          if (rVerse.contains("-")) {
            verseText = await this.getAyahRange(rVerse);
          } else {
            verseText = await this.getAyah(rVerse) + "\n";
          }
          totalT += verseText + "\n";
        }
        editor.replaceSelection(totalT);
      }
    });
    this.addSettingTab(new QuranLookupSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  handleParens(txtVal, removeParens) {
    return removeParens ? txtVal.replace(/ *\([^)]*\)*/g, "").replace(/ \[(.+?)\]/g, " ").replace(/\s+([.,!":])/g, "$1") : txtVal;
  }
  resolveAPIurl(surah, edition, startAyah, ayahRange = 1) {
    return "https://api.alquran.cloud/v1/surah/" + surah + "/" + edition + "?offset=" + startAyah + "&limit=" + ayahRange;
  }
  async fetchArabicAndTranslation(urlArabic, urlEnglish) {
    const [arabicResponse, englishResponse] = await Promise.all([
      fetch(urlArabic),
      fetch(urlEnglish)
    ]);
    const arabic = await arabicResponse.json();
    const english = await englishResponse.json();
    return [arabic, english];
  }
  async getAyahRange(verse) {
    const surah = verse.split(":")[0];
    const ayahRangeText = verse.split(":")[1];
    const startAyah = parseInt(ayahRangeText.split("-")[0]) - 1;
    const endAyah = parseInt(ayahRangeText.split("-")[1]);
    const ayahRange = endAyah - startAyah;
    const translator = EnTranslations[this.settings.translatorIndex];
    const urlEnglis = this.resolveAPIurl(surah, translator, startAyah, ayahRange);
    const urlArabic = this.resolveAPIurl(surah, "ar.quran-simple", startAyah, ayahRange);
    const totalText = this.fetchArabicAndTranslation(urlArabic, urlEnglis).then(([arabic, englis]) => {
      const arKeys = arabic.data.ayahs.map((val) => ({ verseNum: +val.numberInSurah, arText: val.text }));
      const enKeys = englis.data.ayahs.map((val) => ({ verseNum: +val.numberInSurah, enText: this.handleParens(val.text, this.settings.removeParens) }));
      const surahName = englis.data.englishName;
      const surahNumber = englis.data.number;
      const groupings = arKeys.map((itm) => ({
        ...enKeys.find((item) => item.verseNum === itm.verseNum && item),
        ...itm
      }));
      const surahAndAyah = "> [!TIP]+ " + surahName + " (" + surahNumber + ":" + ayahRangeText + ")";
      let strAdder = surahAndAyah + "\n";
      for (const g of groupings) {
        strAdder += "> " + g.arText + "\n> " + g.enText + "\n>\n";
      }
      return strAdder.slice(0, -2);
    }).catch((error) => {
      return "";
    });
    return totalText;
  }
  async getAyah(verse) {
    const surah = verse.split(":")[0];
    const ayah = parseInt(verse.split(":")[1]) - 1;
    const translator = EnTranslations[this.settings.translatorIndex];
    const urlEnglis = this.resolveAPIurl(surah, translator, ayah);
    const urlArabic = this.resolveAPIurl(surah, "ar.quran-simple", ayah);
    const totalText = this.fetchArabicAndTranslation(urlArabic, urlEnglis).then(([arabic, englis]) => {
      const arText = arabic.data.ayahs[0].text;
      const enText = this.handleParens(englis.data.ayahs[0].text, this.settings.removeParens);
      const surahName = englis.data.englishName;
      const surahNumber = englis.data.number;
      const ayahNumber = englis.data.ayahs[0].numberInSurah;
      const surahAndAyah = "> [!TIP]+ " + surahName + " (" + surahNumber + ":" + ayahNumber + ")";
      return surahAndAyah + "\n>" + arText + "\n>" + enText;
    }).catch((error) => {
      return "";
    });
    return totalText;
  }
};
var QuranLookupSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quran Lookup Settings" });
    new import_obsidian.Setting(containerEl).setName("Translation Type").setDesc("Which english translation to use").addDropdown((dropdown) => {
      dropdown.addOptions(EnTranslations).setValue(this.plugin.settings.translatorIndex.toString()).onChange(async (value) => {
        this.plugin.settings.translatorIndex = +value;
        console.log(this.plugin.settings.translatorIndex);
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Remove Parenthesis Content").setDesc("If true, removes the added translator content that would normally appear in parenthesis").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.removeParens).onChange(async (removeParens) => {
        this.plugin.settings.removeParens = removeParens;
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,

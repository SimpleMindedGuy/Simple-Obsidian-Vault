/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => TypingSpeedPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  metrics: "wpm",
  darken_after_pausing: true
};
function getMetricFactor(metric) {
  switch (metric) {
    case "cpm":
    case "wpm":
      return 60;
    case "cps":
      return 1;
  }
}
function average_array(array) {
  var avg = 0;
  array.forEach((val, idx) => {
    avg += val;
  });
  return avg / array.length;
}
var TypingSpeedPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.Typed = [0];
    this.keyTypedInSecond = 0;
    this.wordTypedInSecond = 0;
    this.keyTypedSinceSpace = 0;
  }
  hasStoppedTyping(typed) {
    const check_start = typed.length - 2;
    if (check_start < 0) {
      return false;
    }
    const sum_last_three = typed[check_start] + typed[check_start + 1];
    return sum_last_three == 0;
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.statusBarItemEl = this.addStatusBarItem();
      this.statusBarItemEl.setText("");
      this.addSettingTab(new TypingSpeedSettingTab(this.app, this));
      this.registerDomEvent(document, "keydown", (evt) => {
        const keyRegex = /^[\p{L},;1-9]$/gu;
        if (evt.key.match(keyRegex)) {
          this.keyTypedInSecond += 1;
          this.keyTypedSinceSpace += 1;
        }
        if (evt.key == " " && this.keyTypedSinceSpace != 0) {
          this.wordTypedInSecond += 1;
          this.keyTypedSinceSpace = 0;
        }
      });
      this.registerInterval(window.setInterval(() => {
        var average = 0;
        var fact = getMetricFactor(this.settings.metrics);
        var added = 0;
        if (this.settings.metrics == "cps" || this.settings.metrics == "cpm") {
          added = this.keyTypedInSecond;
          this.keyTypedInSecond = 0;
        } else if (this.settings.metrics == "wpm") {
          added = this.wordTypedInSecond;
          this.wordTypedInSecond = 0;
        }
        if (!this.hasStoppedTyping(this.Typed) || added != 0) {
          if (this.Typed.push(added) > 10) {
            this.Typed.shift();
          }
          average = Math.round(average_array(this.Typed) * fact);
          if (this.settings.darken_after_pausing) {
            this.statusBarItemEl.style.opacity = "100%";
          }
        } else {
          if (this.settings.darken_after_pausing) {
            this.statusBarItemEl.style.opacity = "50%";
          }
        }
        this.statusBarItemEl.setText(average + " " + this.settings.metrics);
      }, 1e3));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var TypingSpeedSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for typing-speed plugin" });
    new import_obsidian.Setting(containerEl).setName("Darken after 3 sec").setDesc("When you stop writing, after 3 seconds the typing speed display will darken.").addToggle((bool) => bool.setValue(true).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.darken_after_pausing = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Typing speed metric").setDesc("choose which metric to use for typing speed").addDropdown((text) => text.addOption("wpm", "word per minute").addOption("cps", "character per second").addOption("cpm", "character per minute").setValue(this.plugin.settings.metrics).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.metrics = value;
      this.plugin.Typed = [0];
      yield this.plugin.saveSettings();
    })));
  }
};

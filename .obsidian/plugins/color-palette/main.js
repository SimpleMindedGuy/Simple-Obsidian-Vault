/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/validate-color/lib/index.js
var require_lib = __commonJS({
  "node_modules/validate-color/lib/index.js"(exports, module2) {
    module2.exports = function(e2) {
      var r2 = {};
      function t2(n2) {
        if (r2[n2])
          return r2[n2].exports;
        var a2 = r2[n2] = { i: n2, l: false, exports: {} };
        return e2[n2].call(a2.exports, a2, a2.exports, t2), a2.l = true, a2.exports;
      }
      return t2.m = e2, t2.c = r2, t2.d = function(e3, r3, n2) {
        t2.o(e3, r3) || Object.defineProperty(e3, r3, { enumerable: true, get: n2 });
      }, t2.r = function(e3) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
      }, t2.t = function(e3, r3) {
        if (1 & r3 && (e3 = t2(e3)), 8 & r3)
          return e3;
        if (4 & r3 && "object" == typeof e3 && e3 && e3.__esModule)
          return e3;
        var n2 = /* @__PURE__ */ Object.create(null);
        if (t2.r(n2), Object.defineProperty(n2, "default", { enumerable: true, value: e3 }), 2 & r3 && "string" != typeof e3)
          for (var a2 in e3)
            t2.d(n2, a2, function(r4) {
              return e3[r4];
            }.bind(null, a2));
        return n2;
      }, t2.n = function(e3) {
        var r3 = e3 && e3.__esModule ? function() {
          return e3.default;
        } : function() {
          return e3;
        };
        return t2.d(r3, "a", r3), r3;
      }, t2.o = function(e3, r3) {
        return Object.prototype.hasOwnProperty.call(e3, r3);
      }, t2.p = "", t2(t2.s = 0);
    }([function(e2, r2, t2) {
      "use strict";
      t2.r(r2), t2.d(r2, "validateHTMLColorName", function() {
        return l2;
      }), t2.d(r2, "validateHTMLColorSpecialName", function() {
        return i2;
      }), t2.d(r2, "validateHTMLColorHex", function() {
        return u2;
      }), t2.d(r2, "validateHTMLColorRgb", function() {
        return g2;
      }), t2.d(r2, "validateHTMLColorHsl", function() {
        return y2;
      }), t2.d(r2, "validateHTMLColorHwb", function() {
        return L2;
      }), t2.d(r2, "validateHTMLColorLab", function() {
        return S2;
      }), t2.d(r2, "validateHTMLColorLch", function() {
        return m2;
      }), t2.d(r2, "validateHTMLColor", function() {
        return G2;
      });
      const n2 = (e3) => e3 && "string" == typeof e3, a2 = ["AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenrod", "DarkGray", "DarkGrey", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "DarkOrange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkSlateGrey", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DimGrey", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "Goldenrod", "Gray", "Grey", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenrodYellow", "LightGray", "LightGrey", "LightGreen", "LightPink", "LightSalmon", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSlateGrey", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquamarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenrod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RebeccaPurple", "Red", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SlateGrey", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen"], o2 = ["currentColor", "inherit", "transparent"], l2 = (e3) => {
        let r3 = false;
        return n2(e3) && a2.map((t3) => (e3.toLowerCase() === t3.toLowerCase() && (r3 = true), null)), r3;
      }, i2 = (e3) => {
        let r3 = false;
        return n2(e3) && o2.map((t3) => (e3.toLowerCase() === t3.toLowerCase() && (r3 = true), null)), r3;
      }, u2 = (e3) => {
        if (n2(e3)) {
          const r3 = /^#([\da-f]{3}){1,2}$|^#([\da-f]{4}){1,2}$/i;
          return e3 && r3.test(e3);
        }
        return false;
      }, d2 = "(([\\d]{0,5})((\\.([\\d]{1,5}))?))", s2 = `(${d2}%)`, c2 = "(([0-9]|[1-9][0-9]|100)%)", f2 = `(${c2}|(0?((\\.([\\d]{1,5}))?))|1)`, h2 = `([\\s]{0,5})\\)?)(([\\s]{0,5})(\\/?)([\\s]{1,5})${`(((${c2}))|(0?((\\.([\\d]{1,5}))?))|1))?`}([\\s]{0,5})\\)`, $2 = "(-?(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9])((\\.([\\d]{1,5}))?)|360)(deg)?)", g2 = (e3) => {
        if (n2(e3)) {
          const r3 = "([\\s]{0,5})([\\d]{1,5})%?([\\s]{0,5}),?", t3 = "((([\\s]{0,5}),?([\\s]{0,5}))|(([\\s]{1,5})))", n3 = new RegExp(`^(rgb)a?\\(${`${r3}${t3}`}${`${r3}${t3}`}${`${r3}${t3}`}(${"(\\/?([\\s]{0,5})(0?\\.?([\\d]{1,5})%?([\\s]{0,5}))?|1|0)"})?\\)$`);
          return e3 && n3.test(e3);
        }
        return false;
      }, y2 = (e3) => {
        if (n2(e3)) {
          const r3 = new RegExp(`^(hsl)a?\\((([\\s]{0,5})(${$2}|${"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9][0-9]|400)grad)"}|${"((([0-5])?\\.([\\d]{1,5})|6\\.([0-9]|1[0-9]|2[0-8])|[0-6])rad)"}|${"((0?((\\.([\\d]{1,5}))?)|1)turn)"})((([\\s]{0,5}),([\\s]{0,5}))|(([\\s]{1,5}))))(([\\s]{0,5})(0|${c2})((([\\s]{0,5}),([\\s]{0,5}))|(([\\s]{1,5}))))(([\\s]{0,5})(0|${c2})([\\s]{0,5})\\)?)(([\\s]{0,5})(\\/?|,?)([\\s]{0,5})(((${c2}))|(0?((\\.([\\d]{1,5}))?))|1))?\\)$`);
          return e3 && r3.test(e3);
        }
        return false;
      }, L2 = (e3) => {
        if (n2(e3)) {
          const r3 = new RegExp(`^(hwb\\(([\\s]{0,5})${$2}([\\s]{1,5}))((0|${c2})([\\s]{1,5}))((0|${c2})${h2}$`);
          return e3 && r3.test(e3);
        }
        return false;
      }, S2 = (e3) => {
        if (n2(e3)) {
          const r3 = "(-?(([0-9]|[1-9][0-9]|1[0-5][0-9])((\\.([\\d]{1,5}))?)?|160))", t3 = new RegExp(`^(lab\\(([\\s]{0,5})${s2}([\\s]{1,5})${r3}([\\s]{1,5})${r3}${h2}$`);
          return e3 && t3.test(e3);
        }
        return false;
      }, m2 = (e3) => {
        if (n2(e3)) {
          const r3 = "((([0-9]|[1-9][0-9])?((\\.([\\d]{1,5}))?)|100)(%)?)", t3 = "" + d2, n3 = `((${$2})|(0|${f2})|(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9])((\\.([\\d]{1,5}))?)|360))`, a3 = `(\\/([\\s]{0,5})${f2})`, o3 = new RegExp(`^lch\\(${`(([\\s]{0,5})${r3}([\\s]{1,5})${t3}([\\s]{1,5})${n3}([\\s]{0,5})(${a3})?)`}\\)$`);
          return e3 && o3.test(e3);
        }
        return false;
      }, G2 = (e3) => !!(e3 && u2(e3) || g2(e3) || y2(e3) || L2(e3) || S2(e3) || m2(e3));
      r2.default = (e3) => !!(e3 && u2(e3) || l2(e3) || i2(e3) || g2(e3) || y2(e3) || L2(e3) || S2(e3) || m2(e3));
    }]);
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ColorPalette2,
  urlRegex: () => urlRegex
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/CreatePaletteModal.ts
var import_obsidian2 = require("obsidian");

// node_modules/colorsea/dist/index.esm.js
function t(t2, r2, n2, e2) {
  var o2, i2 = arguments.length, a2 = i2 < 3 ? r2 : null === e2 ? e2 = Object.getOwnPropertyDescriptor(r2, n2) : e2;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
    a2 = Reflect.decorate(t2, r2, n2, e2);
  else
    for (var u2 = t2.length - 1; u2 >= 0; u2--)
      (o2 = t2[u2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(r2, n2, a2) : o2(r2, n2)) || a2);
  return i2 > 3 && a2 && Object.defineProperty(r2, n2, a2), a2;
}
function r(t2, r2, n2) {
  if (n2 || 2 === arguments.length)
    for (var e2, o2 = 0, i2 = r2.length; o2 < i2; o2++)
      !e2 && o2 in r2 || (e2 || (e2 = Array.prototype.slice.call(r2, 0, o2)), e2[o2] = r2[o2]);
  return t2.concat(e2 || Array.prototype.slice.call(r2));
}
var n = function(t2, r2, n2) {
  return [t2, r2, n2].map(function(t3) {
    return (t3 /= 255) > 0.04045 ? Math.pow((t3 + 0.055) / 1.055, 2.4) : t3 / 12.92;
  });
};
var e = function(t2, r2, n2) {
  return [t2, r2, n2].map(function(t3) {
    return 255 * (t3 <= 304e-5 ? 12.92 * t3 : 1.055 * Math.pow(t3, 1 / 2.4) - 0.055);
  });
};
var o = function(t2, r2, n2) {
  return Math.min(Math.max(t2, r2), n2);
};
var i = function(t2, r2) {
  return Math.round((t2 + Number.EPSILON) * Math.pow(10, r2)) / Math.pow(10, r2);
};
var a = function(t2, r2) {
  return Math.floor(Math.random() * (r2 - t2 + 1) - t2);
};
var u = function(t2, r2, n2, e2) {
  for (var i2, a2 = [t2, r2, n2], u2 = "#", h2 = 0; h2 < a2.length; h2++)
    u2 += (i2 = a2[h2], Math.round(o(i2, 0, 255)).toString(16).padStart(2, "0"));
  return null != e2 && (u2 += Math.round(o(e2, 0, 100) / 100 * 255).toString(16).padStart(2, "0")), u2;
};
var h = function(t2) {
  var n2 = t2.length, e2 = (t2 = function(t3) {
    var r2 = (t3 = /^#/.test(t3) ? t3.slice(1) : t3).length;
    if (![3, 4, 6, 8].includes(r2))
      return "000000";
    if (6 === r2 || 8 === r2)
      return t3;
    if (3 === r2 || 4 === r2) {
      for (var n3 = "", e3 = 0; e3 < r2; e3++) {
        var o3 = t3[e3];
        n3 += "" + o3 + o3;
      }
      return n3;
    }
    return "000000";
  }(t2).padEnd(8, "ff")).match(/.{2}/g);
  if (!e2)
    return [0, 0, 0, 1];
  var o2 = [0, 0, 0], i2 = false;
  return e2.forEach(function(t3, r2) {
    r2 < 3 ? o2[r2] = parseInt(t3, 16) : i2 = 100 * parseInt(t3, 16) / 255;
  }), false === i2 || n2 < 8 ? o2 : r(r([], o2, true), [i2], false);
};
var c = function(t2, r2, n2) {
  var e2;
  e2 = [t2, r2, n2].map(function(t3) {
    return t3 / 255;
  }), t2 = e2[0], r2 = e2[1], n2 = e2[2];
  var o2 = 1 - Math.max(t2, r2, n2), i2 = o2 < 1 ? 1 / (1 - o2) : 0;
  return [(1 - t2 - o2) * i2 * 100, (1 - r2 - o2) * i2 * 100, (1 - n2 - o2) * i2 * 100, 100 * o2];
};
var l = function(t2, r2, n2, e2) {
  return 100 === e2 ? [0, 0, 0] : (e2 /= 100, [t2, r2, n2].map(function(t3) {
    return (t3 /= 100) >= 1 ? 0 : 255 * (1 - t3) * (1 - e2);
  }));
};
function p(t2, r2, n2, e2) {
  var o2;
  void 0 === e2 && (e2 = "l"), o2 = [t2, r2, n2].map(function(t3) {
    return t3 / 255;
  }), t2 = o2[0], r2 = o2[1], n2 = o2[2];
  var i2 = Math.max(t2, r2, n2), a2 = Math.min(t2, r2, n2), u2 = function(t3, r3, n3, e3) {
    var o3;
    void 0 === e3 && (e3 = false), o3 = [t3, r3, n3].map(function(t4) {
      return t4 / 255;
    }), t3 = o3[0], r3 = o3[1], n3 = o3[2];
    var i3 = Math.max(t3, r3, n3), a3 = Math.min(t3, r3, n3), u3 = 0;
    if (i3 !== a3)
      if (e3)
        u3 = (t3 - r3 + (t3 - n3)) / 2, u3 /= Math.sqrt((t3 - r3) * (t3 - r3) + (t3 - n3) * (r3 - n3)), u3 = Math.acos(u3), n3 > r3 && (u3 = 2 * Math.PI - u3), u3 /= 2 * Math.PI;
      else {
        var h3 = i3 - a3;
        u3 = i3 === t3 ? (r3 - n3) / h3 + (r3 < n3 ? 6 : 0) : i3 === r3 ? (n3 - t3) / h3 + 2 : (t3 - r3) / h3 + 4, u3 /= 6;
      }
    else
      u3 = NaN;
    return 360 * u3;
  }(t2, r2, n2, "i" === e2), h2 = 0, c2 = (i2 + a2) / 2, l2 = i2 - a2, p2 = i2, f2 = (t2 + r2 + n2) / 3;
  return "v" === e2 && (h2 = 0 === i2 ? 0 : l2 / i2), i2 !== a2 && "l" === e2 && (h2 = c2 > 0.5 ? l2 / (2 - i2 - a2) : l2 / (i2 + a2)), "i" === e2 && (h2 = f2 > 0 ? 1 - a2 / f2 : 0), h2 *= 100, c2 *= 100, f2 *= 100, "l" === e2 ? [u2, h2, c2] : "v" === e2 ? [u2, h2, p2 *= 100] : [u2, h2, f2];
}
var f = function(t2, r2, n2) {
  return p(t2, r2, n2, "l");
};
var s = function(t2, r2, n2) {
  var e2, i2, a2 = function(t3) {
    return 6 * (t3 = t3 < 0 ? t3 + 1 : t3 > 1 ? t3 - 1 : t3) < 1 ? e2 + (i2 - e2) * t3 * 6 : 2 * t3 < 1 ? i2 : 3 * t3 < 2 ? e2 + (i2 - e2) * (2 / 3 - t3) * 6 : e2;
  };
  return t2 = t2 % 360 / 360, r2 = o(r2 / 100, 0, 1), n2 = o(n2 / 100, 0, 1), e2 = 2 * n2 - (i2 = n2 <= 0.5 ? n2 * (r2 + 1) : n2 + r2 - n2 * r2), [255 * a2(t2 + 1 / 3), 255 * a2(t2), 255 * a2(t2 - 1 / 3)];
};
var v = function(t2, r2, n2) {
  return p(t2, r2, n2, "v");
};
var b = function(t2, r2, n2) {
  var e2, o2, i2 = [n2 /= 100, n2 * (1 - (r2 /= 100)), n2 * (1 - (o2 = (t2 = t2 % 360 / 360 * 360) / 60 - (e2 = Math.floor(t2 / 60 % 6))) * r2), n2 * (1 - (1 - o2) * r2)], a2 = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];
  return [255 * i2[a2[e2][0]], 255 * i2[a2[e2][1]], 255 * i2[a2[e2][2]]];
};
var y = function(t2, r2, n2) {
  return p(t2, r2, n2, "i");
};
var d = function(t2, r2, n2) {
  var e2, i2, a2, u2;
  r2 /= 100, n2 /= 100, isNaN(t2) && (t2 = 0), isNaN(r2) && (r2 = 0);
  var h2 = function(t3) {
    return (1 + r2 * Math.cos(2 * Math.PI * t3) / Math.cos(Math.PI / 3 - 2 * Math.PI * t3)) / 3;
  };
  return (t2 = (360 + t2) % 360 / 360) < 1 / 3 ? a2 = 1 - ((u2 = (1 - r2) / 3) + (i2 = h2(t2))) : t2 < 2 / 3 ? u2 = 1 - ((i2 = (1 - r2) / 3) + (a2 = h2(t2 -= 1 / 3))) : i2 = 1 - ((a2 = (1 - r2) / 3) + (u2 = h2(t2 -= 2 / 3))), e2 = [i2, a2, u2].map(function(t3) {
    return 255 * o(n2 * t3 * 3, 0, 1);
  }), [i2 = e2[0], a2 = e2[1], u2 = e2[2]];
};
var g = function(t2, r2, n2) {
  return [f(t2, r2, n2)[0], 100 * (Math.min(t2, r2, n2) / 255), 100 * (1 - Math.max(t2, r2, n2) / 255)];
};
function w(t2, r2, n2) {
  return r2 /= 100, n2 /= 100, s(t2, 100, 50).map(function(t3) {
    return 255 * (t3 / 255 * (1 - r2 - n2) + r2);
  });
}
var m = { x: [0.4124564, 0.3575761, 0.1804375], y: [0.2126729, 0.7151522, 0.072175], z: [0.0193339, 0.119192, 0.9503041] };
var M = { r: [3.2404542, -1.5371385, -0.4985314], g: [-0.969266, 1.8760108, 0.041556], b: [0.0556434, -0.2040259, 1.0572252] };
var x = 0.95047;
var _ = 1;
var C = 1.08883;
var I = 0.206896552;
var k = 8856452e-9;
var E = 24389 / 27;
var z = function(t2, r2, e2) {
  var o2 = n(t2, r2, e2);
  return [100 * m.x.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0), 100 * m.y.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0), 100 * m.z.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0)];
};
var N = function(t2, r2, n2) {
  var o2 = [t2, r2, n2], i2 = M.r.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100, a2 = M.g.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100, u2 = M.b.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100;
  return e(i2, a2, u2);
};
var O = function(t2, r2, n2) {
  var e2;
  return e2 = [t2 = t2 / x / 100, r2 = r2 / _ / 100, n2 = n2 / C / 100].map(function(t3) {
    return t3 > k ? Math.pow(t3, 1 / 3) : (E * t3 + 16) / 116;
  }), t2 = e2[0], r2 = e2[1], n2 = e2[2], [Math.max(0, 116 * r2 - 16), 500 * (t2 - r2), 200 * (r2 - n2)];
};
var P = function(t2, r2, n2) {
  var e2, o2 = (t2 + 16) / 116, i2 = isNaN(r2) ? o2 : o2 + r2 / 500, a2 = isNaN(n2) ? o2 : o2 - n2 / 200;
  return e2 = [i2, o2, a2].map(function(t3) {
    return t3 > I ? Math.pow(t3, 3) : (116 * t3 - 16) / E;
  }), i2 = e2[0], o2 = e2[1], a2 = e2[2], [i2 * x * 100, o2 * _ * 100, a2 * C * 100];
};
var j = function(t2, r2, n2) {
  return N.apply(void 0, P(t2, r2, n2));
};
var S = function(t2, r2, n2) {
  r2 = o(r2, -100, 100), n2 = o(n2, -100, 100);
  var e2 = Math.sqrt(r2 * r2 + n2 * n2), i2 = (180 * Math.atan2(n2, r2) / Math.PI + 360) % 360;
  return 0 === Math.round(1e4 * e2) && (i2 = Number.NaN), [t2, e2, i2];
};
var A = function(t2, r2, n2) {
  return isNaN(n2) && (n2 = 0), n2 *= Math.PI / 180, [t2, Math.cos(n2) * r2, Math.sin(n2) * r2];
};
var L = function(t2, r2, n2) {
  return P.apply(void 0, A(t2, r2, n2));
};
var H = function(t2, r2, n2) {
  var e2 = t2 + r2 + n2, o2 = 0, i2 = 0;
  return e2 > 0 && (o2 = t2 / e2, i2 = r2 / e2), [o2, i2, r2];
};
var Y = Object.freeze({ __proto__: null, linear2rgb: e, rgb2linear: n, rgb2hex: u, hex2rgb: h, rgb2cmyk: c, cmyk2rgb: l, rgb2hsl: f, hsl2rgb: s, rgb2hsv: v, hsv2rgb: b, rgb2hsi: y, hsi2rgb: d, rgb2hwb: g, hwb2rgb: w, rgb2xyz: z, xyz2rgb: N, xyz2lab: O, lab2xyz: P, rgb2lab: function(t2, r2, n2) {
  return O.apply(void 0, z(t2, r2, n2));
}, lab2rgb: j, lch2lab: A, lab2lch: S, xyz2lch: function(t2, r2, n2) {
  return S.apply(void 0, O(t2, r2, n2));
}, lch2xyz: L, xyY2xyz: function(t2, r2, n2) {
  return 0 === r2 ? [0, 0, 0] : [t2 * (n2 / r2), n2, n2 / r2 * (1 - t2 - r2)];
}, xyz2xyY: H });
function R(t2, n2) {
  return void 0 === n2 && (n2 = false), function(e2, o2, i2) {
    var a2 = i2.value;
    i2.value = function() {
      for (var e3 = [], o3 = 0; o3 < arguments.length; o3++)
        e3[o3] = arguments[o3];
      if (e3.length > 0 && n2) {
        var i3 = JSON.stringify(e3);
        t2 += i3;
      }
      if (this.cache.has(t2))
        return this.cache.get(t2);
      var u2 = a2.call.apply(a2, r([this], e3, false));
      return this.cache.set(t2, u2), u2;
    };
  };
}
function q(t2, n2, e2, o2) {
  return void 0 === t2 && (t2 = [0, 2, 2]), void 0 === n2 && (n2 = 0), void 0 === e2 && (e2 = true), void 0 === o2 && (o2 = 0), function(a2, u2, h2) {
    var c2 = h2.value;
    h2.value = function() {
      for (var a3 = [], u3 = 0; u3 < arguments.length; u3++)
        a3[u3] = arguments[u3];
      var h3 = void 0 === a3[o2] ? e2 : a3[o2], l2 = c2.call.apply(c2, r([this], a3, false));
      if (false === h3)
        return l2;
      var p2 = "number" == typeof h3 ? Math.round(h3) : 0, f2 = "number" == typeof t2 ? new Array(l2.length).fill(t2) : t2, s2 = f2.map(function(t3) {
        return 1 === n2 ? "number" == typeof h3 ? p2 : t3 : t3 + p2;
      });
      return l2.map(function(t3, r2) {
        return i(t3, s2[r2]);
      });
    };
  };
}
var D = function(t2, r2, n2) {
  var e2 = t2 instanceof ft ? t2 : new ft(t2), i2 = r2 instanceof ft ? r2 : new ft(r2), a2 = o(n2, 0, 100) / 100, u2 = 2 * a2 - 1, h2 = e2.alpha() - i2.alpha(), c2 = ((u2 * h2 == -1 ? u2 : (u2 + h2) / (1 + u2 * h2)) + 1) / 2, l2 = 1 - c2, p2 = [Math.round(o(e2.red() * c2 + i2.red() * l2, 0, 255)), Math.round(o(e2.green() * c2 + i2.green() * l2, 0, 255)), Math.round(o(e2.blue() * c2 + i2.blue() * l2, 0, 255))], f2 = e2.alpha() * a2 + i2.alpha() * (1 - a2);
  return new ft(p2, f2);
};
var F = Math.sqrt;
var U = Math.pow;
var $ = Math.cos;
var J = Math.abs;
var Z = Math.sin;
var B = Math.exp;
var G = Math.atan2;
var K = Math.PI;
var Q = function(t2) {
  return K * t2 / 180;
};
var T = function(t2, r2, n2) {
  void 0 === n2 && (n2 = true);
  var e2 = G(r2, t2);
  return n2 && (e2 = (e2 = (e2 = 180 * e2 / K) > 0 ? e2 : e2 + 360) > 360 ? e2 - 360 : e2), e2;
};
var V = function(t2, r2) {
  void 0 === r2 && (r2 = true);
  var n2 = t2.lab(false), e2 = n2[0], o2 = n2[1], i2 = n2[2];
  return [e2, F(U(o2, 2) + U(i2, 2)), T(o2, i2, r2), o2, i2];
};
var W = ["CMC", "CIE", "CIE2000", "CIE1994", "CIE1976"];
var X = "CMC";
var tt = "CIE2000";
var rt = "CIE1994";
var nt = "CIE1976";
function et(t2, r2, n2, e2) {
  void 0 === n2 && (n2 = "CIE");
  var o2 = function(t3) {
    var r3 = t3.toUpperCase();
    return W.includes(r3) && "CIE" !== r3 ? r3 : tt;
  }(n2);
  if (e2 = e2 || {}, o2 === X) {
    var i2 = Object.assign({}, { l: 1, c: 1 }, e2);
    return function(t3, r3, n3, e3) {
      void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1);
      var o3 = V(t3, true), i3 = o3[0], a3 = o3[1], u3 = o3[2], h3 = o3[3], c3 = o3[4], l2 = V(r3), p2 = l2[0], f2 = l2[1], s2 = l2[3], v2 = a3 - f2, b2 = i3 - p2, y2 = c3 - l2[4], d2 = F(U(h3 - s2, 2) + U(y2, 2) - U(v2, 2)), g2 = i3 < 16 ? 0.511 : 0.040975 * i3 / (1 + 0.01765 * i3), w2 = 0.0638 * a3 / (1 + 0.0131 * a3) + 0.638, m2 = 164 <= u3 && u3 <= 345 ? 0.56 + J(0.2 * $(Q(u3 + 168))) : 0.36 + J(0.4 * $(Q(u3 + 35))), M2 = F(U(a3, 4) / (U(a3, 4) + 1900)), x2 = w2 * (M2 * m2 + 1 - M2);
      return F(U(b2 / (n3 * g2), 2) + U(v2 / (e3 * w2), 2) + U(d2 / x2, 2));
    }(t2, r2, i2.l, i2.c);
  }
  if (o2 === rt) {
    var a2 = { kL: 1, kC: 1, kH: 1, cate: "graphic" }, u2 = Object.assign({}, a2, e2);
    return function(t3, r3, n3, e3, o3, i3) {
      void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1), void 0 === o3 && (o3 = 1), void 0 === i3 && (i3 = "graphic");
      var a3 = "textiles" === i3 ? 0.048 : 0.045, u3 = "textiles" === i3 ? 0.014 : 0.015;
      n3 = "textiles" === i3 ? 2 : n3;
      var h3 = V(t3), c3 = h3[0], l2 = h3[1], p2 = h3[3], f2 = h3[4], s2 = V(r3), v2 = s2[0], b2 = s2[1], y2 = s2[3], d2 = c3 - v2, g2 = l2 - b2, w2 = f2 - s2[4], m2 = 1 + a3 * l2, M2 = 1 + u3 * l2, x2 = F(U(p2 - y2, 2) + U(w2, 2) - U(g2, 2));
      return F(U(d2 / (1 * n3), 2) + U(g2 / (e3 * m2), 2) + U(x2 / (o3 * M2), 2));
    }(t2, r2, u2.kL, u2.kC, u2.kH, u2.cate);
  }
  if (o2 === nt)
    return function(t3, r3) {
      var n3 = t3.lab(false), e3 = n3[0], o3 = n3[1], i3 = n3[2], a3 = r3.lab(false), u3 = a3[0], h3 = a3[1], c3 = a3[2];
      return F(U(e3 - u3, 2) + U(o3 - h3, 2) + U(i3 - c3, 2));
    }(t2, r2);
  var h2 = { kL: 1, kC: 1, kH: 1 }, c2 = Object.assign({}, h2, e2);
  return function(t3, r3, n3, e3, o3) {
    void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1), void 0 === o3 && (o3 = 1);
    var i3 = V(t3), a3 = i3[0], u3 = i3[1], h3 = i3[3], c3 = i3[4], l2 = V(r3), p2 = l2[0], f2 = l2[1], s2 = l2[3], v2 = l2[4], b2 = (a3 + p2) / 2, y2 = (u3 + f2) / 2, d2 = (1 - F(U(y2, 7) / (U(y2, 7) + U(25, 7)))) / 2, g2 = h3 * (1 + d2), w2 = s2 * (1 + d2), m2 = F(U(g2, 2) + U(c3, 2)), M2 = F(U(w2, 2) + U(v2, 2)), x2 = T(g2, c3, true), _2 = T(w2, v2, true), C2 = (m2 + M2) / 2, I2 = J(x2 - _2) > 180 ? (x2 + _2 + 360) / 2 : (x2 + _2) / 2, k2 = 1 - 0.17 * $(Q(I2 - 30)) + 0.24 * $(Q(2 * I2)) + 0.32 * $(Q(3 * I2 + 6)) - 0.2 * $(Q(4 * I2 - 63)), E2 = J(_2 - x2) <= 180 ? _2 - x2 : J(_2 - x2) > 180 && _2 <= x2 ? _2 - x2 + 360 : _2 - x2 - 360, z2 = p2 - a3, N2 = f2 - u3, O2 = 2 * F(m2 * M2) * Z(Q(E2) / 2), P2 = 1 + 0.015 * U(b2 - 50, 2) / F(20 + U(b2 - 50, 2)), j2 = 1 + 0.045 * C2, S2 = 1 + 0.015 * C2 * k2, A2 = 30 * B(-U((I2 - 275) / 25, 2)), L2 = -2 * F(U(C2, 7) / (U(C2, 7) + U(25, 7))) * Z(2 * Q(A2));
    return F(U(z2 / (n3 * P2), 2) + U(N2 / (e3 * j2), 2) + U(O2 / (o3 * S2), 2) + L2 * (N2 / (e3 * j2)) * (O2 / (o3 * S2)));
  }(t2, r2, c2.kL, c2.kC, c2.kH);
}
var ot = function(t2, r2, n2) {
  var e2 = Math.abs, o2 = Math.max, i2 = Math.min, a2 = t2 instanceof ft ? t2 : new ft(t2), u2 = r2 instanceof ft ? r2 : new ft(r2), h2 = Object.assign({}, { b: 125, c: 500 }, n2);
  return !(e2(255 * a2.brightness() / 100 - 255 * u2.brightness() / 100) <= h2.b) && !(o2(a2.red(), u2.red()) - i2(a2.red(), u2.red()) + (o2(a2.green(), u2.green()) - i2(a2.green(), u2.green())) + (o2(a2.blue(), u2.blue()) - i2(a2.blue(), u2.blue())) <= h2.c);
};
var it = function(t2, r2, n2) {
  var e2, i2 = function(t3) {
    return o(t3, 0, 100);
  }, a2 = function(t3) {
    return o(t3, 0, 255);
  }, u2 = { h: [0, function(t3) {
    return t3 % 360;
  }], s: [1, i2], l: [2, i2], r: [0, a2], g: [1, a2], b: [2, a2] }, h2 = u2[r2][0];
  if (["h", "s", "l"].includes(r2)) {
    var c2 = t2.hsl();
    if (void 0 === n2)
      return c2[h2];
    n2 = u2[r2][1](n2), c2[h2] = n2, e2 = s.apply(void 0, c2);
  } else {
    if (e2 = t2.rgb(), void 0 === n2)
      return e2[h2];
    n2 = u2[r2][1](n2), e2[h2] = n2;
  }
  return new ft(e2, t2.alpha());
};
var at = {};
var ut = /* @__PURE__ */ new Set(["rgb", "rgba", "cmyk", "lab", "hsl", "hsla", "hsv", "hsva", "hsi", "hsia", "xyz", "lch", "hwb", "hwba"]);
var ht = /^([a-zA-Z]+)\(([\s\S]+)\)$/;
var ct = function(t2) {
  return "string" == typeof t2 ? -1 === t2.indexOf("%") ? ct(Number(t2.trim())) : (t2 = t2.split("%")[0], (t2 = Number(t2.trim())) || 0) : Math.abs(t2) < 1 ? 100 * t2 : t2;
};
var lt = function(t2, r2) {
  void 0 === r2 && (r2 = /* @__PURE__ */ new Set());
  var n2 = "string" == typeof t2 ? t2 : t2.join(",");
  if (r2.has(n2))
    throw new Error("Invalid Color");
  r2.add(n2);
  var e2 = "rgb", o2 = [0, 0, 0], i2 = 100;
  if (Array.isArray(t2)) {
    if (t2.length < 3)
      throw new Error("Invalid Color");
    for (var a2 = 0; a2 < t2.length; a2++)
      if (a2 < 3)
        o2[a2] = t2[a2];
      else {
        if (3 !== a2 || void 0 === t2[3])
          break;
        i2 = t2[3];
      }
  } else {
    var u2 = false, c2 = t2.trim().match(ht);
    if (c2 || (u2 = true), c2) {
      var l2 = c2[1].toLocaleLowerCase();
      if (e2 = l2, ut.has(l2) || (u2 = true), c2[2] && !u2) {
        var p2 = c2[2], f2 = -1 !== p2.indexOf(",") ? "," : " ", s2 = p2.split(f2);
        for (a2 = 0; a2 < 3; a2++)
          void 0 !== s2[a2] && (["lch", "lab"].includes(e2) && 0 === a2 || ["hsl", "hsla", "hsv", "hsva", "hwb", "hwba", "hsi", "hsia"].includes(e2) && a2 > 0 ? o2[a2] = ct(s2[a2]) : o2[a2] = Number(s2[a2].trim()));
        ["rgba", "hsla", "hsva", "hwba", "hsia"].includes(e2) ? (e2 = e2.slice(0, -1), void 0 !== s2[3] && (i2 = ct(s2[3]))) : "cmyk" === e2 && o2.push(void 0 !== s2[3] ? ct(s2[3]) : 0);
      }
    }
    if (u2) {
      if (!/^#(([a-fA-F\d]{3}){1,2}|[a-fA-F\d]{8})$/.test(t2))
        try {
          return t2 = function(t3, r3) {
            if (void 0 === r3 && (r3 = false), t3 = t3.toLowerCase(), void 0 === at[t3]) {
              if (r3)
                throw new Error("Unknown color name: ".concat(t3, ")"));
              return t3;
            }
            return at[t3];
          }(t2, true), lt(t2, r2);
        } catch (t3) {
          throw new Error("Invalid Color");
        }
      o2 = h(t2);
    }
  }
  return [e2, o2, i2];
};
var pt = { thowParseError: false };
var ft = function() {
  function n2(t2, r2, n3) {
    this.cache = /* @__PURE__ */ new Map(), this._rgb = [0, 0, 0], this._alpha = 100;
    var e2 = { thowParseError: pt.thowParseError }, i2 = Object.assign({}, e2, null != n3 ? n3 : {});
    try {
      var a2 = function(t3) {
        var r3, n4 = { lab2rgb: j, hsl2rgb: s, hsv2rgb: b, xyz2rgb: N, hwb2rgb: w, hsi2rgb: d }, e3 = lt(t3), i3 = e3[0], a3 = e3[1], u3 = e3[2];
        if ("rgb" === i3)
          return [a3, u3];
        "lch" === i3 && (i3 = (r3 = ["xyz", L(a3[0], a3[1], a3[2])])[0], a3 = r3[1]);
        var h3 = a3[0], c2 = a3[1], p2 = a3[2], f2 = a3[3];
        if ("cmyk" === i3)
          return [l(h3, c2, p2, f2).map(function(t4) {
            return o(t4, 0, 255);
          }), u3];
        var v2 = "".concat(i3, "2rgb");
        if ("function" == typeof n4[v2])
          return [n4[v2](h3, c2, p2).map(function(t4) {
            return o(t4, 0, 255);
          }), u3];
        throw new Error("Invalid color");
      }(t2), u2 = a2[0], h2 = a2[1];
      this._alpha = h2, this._rgb = u2;
    } catch (t3) {
      if (i2.thowParseError)
        throw t3;
    }
    void 0 !== r2 && (this._alpha = o(r2, 0, 100));
  }
  return n2.prototype.red = function(t2) {
    return it(this, "r", t2);
  }, n2.prototype.green = function(t2) {
    return it(this, "g", t2);
  }, n2.prototype.blue = function(t2) {
    return it(this, "b", t2);
  }, n2.prototype.alpha = function(t2) {
    return void 0 === t2 ? this._alpha : (t2 = o(t2, 0, 100), new n2(this.rgb(), t2));
  }, n2.prototype.fadeIn = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), t2 = r2 && "relative" === r2 ? this._alpha * t2 / 100 : t2, new n2(this.rgb(), o(this._alpha + t2, 0, 100));
  }, n2.prototype.fadeOut = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), t2 = r2 && "relative" === r2 ? this._alpha * t2 / 100 : t2, new n2(this.rgb(), o(this._alpha - t2, 0, 100));
  }, n2.prototype.opacify = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), this.fadeIn(t2, r2);
  }, n2.prototype.transparentize = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), this.fadeOut(t2, r2);
  }, n2.prototype.hue = function(t2) {
    return it(this, "h", t2);
  }, n2.prototype.saturation = function(t2) {
    return it(this, "s", t2);
  }, n2.prototype.lightness = function(t2) {
    return it(this, "l", t2);
  }, n2.prototype.rgb = function(t2) {
    return r([], this._rgb, true);
  }, n2.prototype.rgba = function(t2) {
    return r(r([], this.rgb(false), true), [this._alpha], false);
  }, n2.prototype.cmyk = function(t2) {
    return c.apply(void 0, this._rgb);
  }, n2.prototype.hsl = function(t2) {
    return f.apply(void 0, this._rgb);
  }, n2.prototype.hsla = function(t2) {
    return r(r([], this.hsl(false), true), [this._alpha], false);
  }, n2.prototype.hsv = function(t2) {
    return v.apply(void 0, this._rgb);
  }, n2.prototype.hsi = function(t2) {
    return y.apply(void 0, this._rgb);
  }, n2.prototype.hwb = function(t2) {
    return g.apply(void 0, this._rgb);
  }, n2.prototype.xyz = function(t2) {
    return z.apply(void 0, this._rgb);
  }, n2.prototype.lab = function(t2) {
    return O.apply(void 0, this.xyz(false));
  }, n2.prototype.lch = function(t2) {
    return S.apply(void 0, this.lab(false));
  }, n2.prototype.xyY = function(t2) {
    return H.apply(void 0, this.xyz(false));
  }, n2.prototype.hex = function(t2) {
    void 0 === t2 && (t2 = 2);
    var n3 = 0 === t2 ? void 0 : 1 === t2 ? this._alpha : 100 === this._alpha ? void 0 : this._alpha, e2 = "color:hex:param_".concat(t2);
    if (this.cache.has(e2))
      return this.cache.get(e2);
    var o2 = u.apply(void 0, r(r([], this._rgb, false), [n3], false));
    return this.cache.set(e2, o2), o2;
  }, n2.prototype.lighten = function(t2, r2) {
    void 0 === t2 && (t2 = 5);
    var e2 = this.hsl(false), i2 = e2[0], a2 = e2[1], u2 = e2[2];
    return u2 = o(u2 += void 0 !== r2 && "relative" === r2 ? u2 * (t2 / 100) : t2, 0, 100), new n2(s(i2, a2, u2), this._alpha);
  }, n2.prototype.darken = function(t2, r2) {
    return void 0 === t2 && (t2 = 5), this.lighten(-t2, r2);
  }, n2.prototype.saturate = function(t2, r2) {
    void 0 === t2 && (t2 = 5);
    var e2 = this.hsl(false), i2 = e2[0], a2 = e2[1], u2 = e2[2];
    return a2 = o(a2 += void 0 !== r2 && "relative" === r2 ? a2 * (t2 / 100) : t2, 0, 100), new n2(s(i2, a2, u2), this._alpha);
  }, n2.prototype.desaturate = function(t2, r2) {
    return void 0 === t2 && (t2 = 5), this.saturate(-t2, r2);
  }, n2.prototype.spin = function(t2) {
    var r2 = this.hsl(false), e2 = r2[0], o2 = r2[1], i2 = r2[2];
    return new n2(s(e2 = (e2 + t2 % 360 + 360) % 360, o2, i2), this._alpha);
  }, n2.prototype.adjustHue = function(t2) {
    return this.spin(t2);
  }, n2.prototype.complement = function() {
    return this.spin(180);
  }, n2.prototype.invert = function() {
    var t2 = this._rgb.map(function(t3) {
      return 255 - t3;
    });
    return new n2([t2[0], t2[1], t2[2]], this._alpha);
  }, n2.prototype.mix = function(t2, r2) {
    return void 0 === r2 && (r2 = 50), D(this, t2, 100 - o(r2, 0, 100));
  }, n2.prototype.luma = function() {
    var t2 = this._rgb.map(function(t3) {
      return (t3 /= 255) <= 0.03928 ? t3 / 12.92 : Math.pow((t3 + 0.055) / 1.055, 2.4);
    });
    return 0.2126 * t2[0] + 0.7152 * t2[1] + 0.0722 * t2[2];
  }, n2.prototype.brightness = function() {
    var t2 = this._rgb;
    return function(t3, r2, n3) {
      return (299 * t3 + 587 * r2 + 114 * n3) / 1e3 / 255 * 100;
    }(t2[0], t2[1], t2[2]);
  }, n2.prototype.deltaE = function(t2, r2, n3) {
    return void 0 === r2 && (r2 = "CMC"), et(this, t2, r2, n3);
  }, n2.prototype.visibility = function(t2, r2) {
    return ot(this, t2, r2);
  }, t([q(0, 1, true, 0), R("color:rgb")], n2.prototype, "rgb", null), t([q(0, 1, true, 0)], n2.prototype, "rgba", null), t([q(0, 1, true, 0), R("color:cmyk")], n2.prototype, "cmyk", null), t([q(0, 1, true, 0), R("color:hsl")], n2.prototype, "hsl", null), t([q(0, 1, true, 0)], n2.prototype, "hsla", null), t([q(0, 1, true, 0), R("color:hsv")], n2.prototype, "hsv", null), t([q(0, 1, true, 0), R("color:hsi")], n2.prototype, "hsi", null), t([q(0, 1, true, 0), R("color: hwb")], n2.prototype, "hwb", null), t([q(2, 1, true, 0), R("color:xyz")], n2.prototype, "xyz", null), t([q(2, 1, true, 0), R("color:lab")], n2.prototype, "lab", null), t([q(2, 1, true, 0), R("color:lch")], n2.prototype, "lch", null), t([q(2, 1, true, 0), R("color:xyY")], n2.prototype, "xyY", null), t([R("color:luma")], n2.prototype, "luma", null), n2;
}();
var st = function(t2, r2, n2, e2) {
  return new ft([t2, r2, n2], e2);
};
var vt = function(t2, r2, n2, e2) {
  return new ft(s(t2, r2, n2), e2);
};
var bt = function(t2, r2, n2, e2) {
  return new ft(b(t2, r2, n2), e2);
};
var yt = function(t2, r2, n2, e2) {
  return new ft(d(t2, r2, n2), e2);
};
var dt = function(t2, r2, n2, e2) {
  return new ft(w(t2, r2, n2), e2);
};
var gt = function(t2, r2, n2, e2) {
  return new ft(N(t2, r2, n2), e2);
};
var wt = function(t2, r2, n2, e2) {
  return new ft(j(t2, r2, n2), e2);
};
var mt = function(t2, r2, n2, e2) {
  return new ft(N.apply(void 0, L(t2, r2, n2)), e2);
};
function Mt(t2, r2, n2) {
  return new ft(t2, r2, n2);
}
Mt.config = function(t2) {
  Object.assign(pt, t2);
}, Mt.random = function() {
  var t2 = a(0, 255), r2 = a(0, 255), n2 = a(0, 255);
  return new ft([t2, r2, n2]);
}, Mt.convertor = Y, Mt.Color = ft, Mt.rgb = st, Mt.hsl = vt, Mt.hsv = bt, Mt.hsi = yt, Mt.hwb = dt, Mt.xyz = gt, Mt.lab = wt, Mt.lch = mt, Mt.mix = D, Mt.deltaE = et, Mt.utils = { roundDecimal: i, randomRange: a }, Mt.useNames = function(t2, r2) {
  return function(t3, r3) {
    if (void 0 !== r3 && "function" == typeof r3) {
      var n2 = {};
      for (var e2 in t3) {
        var o2 = r3(e2, t3[e2]), i2 = o2[0], a2 = o2[1];
        n2[i2] = a2;
      }
      Object.assign(at, n2);
    } else
      Object.assign(at, t3);
  }(t2, r2), Mt;
};

// src/settings.ts
var import_obsidian = require("obsidian");
var defaultSettings = {
  noticeDuration: 1e4,
  errorPulse: true,
  aliasMode: "Both" /* Both */,
  height: 150,
  width: 700,
  direction: "column" /* Column */,
  gradient: false
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    let { settings } = this.plugin;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Notice Duration").setDesc("How long error messages are show for in seconds (0 for indefinite)").addText((text) => {
      text.setValue((settings.noticeDuration / 1e3).toString()).onChange(async (value) => {
        settings.noticeDuration = Number(value) * 1e3;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Palette Error Pulse").setDesc("Whether the affected palette should pulse when encountering an error").addToggle((toggle) => {
      toggle.setValue(settings.errorPulse).onChange(async (value) => {
        settings.errorPulse = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Alias Mode").setDesc("What will be shown when aliases option is set in local palette options. Defaults to showing both hex and alias.").addDropdown((dropdown) => {
      dropdown.addOption("Both" /* Both */, "Both" /* Both */).addOption("Prefer Alias" /* Alias */, "Prefer Alias" /* Alias */).setValue(this.plugin.settings.aliasMode).onChange(async (value) => {
        settings.aliasMode = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2").setText("Defaults");
    new import_obsidian.Setting(containerEl).setName("Height").addText((text) => {
      text.setValue(settings.height.toString()).onChange(async (value) => {
        settings.height = Number(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Width").setDesc("Caution - Might cause palettes to display incorrectly.").addText((text) => {
      text.setValue(settings.width.toString()).onChange(async (value) => {
        settings.width = Number(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Direction").addDropdown((dropdown) => {
      dropdown.addOption("column" /* Column */, "column" /* Column */).addOption("row" /* Row */, "row" /* Row */).setValue(this.plugin.settings.direction).onChange(async (value) => {
        settings.direction = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Gradient").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.gradient).onChange(async (value) => {
        settings.gradient = value;
        await this.plugin.saveSettings();
      });
    });
  }
  // Called when settings are exited
  hide() {
    var _a;
    if ((_a = this.plugin) == null ? void 0 : _a.palettes) {
      for (let palette of this.plugin.palettes) {
        palette.refresh();
      }
    }
  }
};

// src/utils/generateRandom.ts
var Combination = /* @__PURE__ */ ((Combination2) => {
  Combination2["Complimentary"] = "Complimentary";
  Combination2["Monochromatic"] = "Monochromatic";
  Combination2["Analogous"] = "Analogous";
  Combination2["Triadic"] = "Triadic";
  Combination2["Tetradic"] = "Tetradic";
  Combination2["Random"] = "Random";
  return Combination2;
})(Combination || {});
function generateColors(baseColor, combination, settings) {
  let colors = [];
  switch (combination) {
    case "Complimentary" /* Complimentary */:
      colors = [baseColor.hex(), baseColor.complement().hex()];
      if (settings)
        settings.aliases = ["Base", "Complimentary Color"];
      break;
    case "Monochromatic" /* Monochromatic */:
      const lightest = baseColor.lighten(20);
      const lighter = baseColor.lighten(10);
      const darker = baseColor.darken(10);
      const darkest = baseColor.darken(20);
      colors = [lightest.hex(), lighter.hex(), baseColor.hex(), darker.hex(), darkest.hex()];
      if (settings)
        settings.aliases = ["Lightest", "Lighter", "Base", "Darker", "Darkest"];
      break;
    case "Analogous" /* Analogous */:
      const east = baseColor.adjustHue(-25);
      const west = baseColor.adjustHue(25);
      colors = [east.hex(), baseColor.hex(), west.hex()];
      if (settings)
        settings.aliases = ["Analogous East", "Base", "Analogous West"];
      break;
    case "Triadic" /* Triadic */:
      const hex120 = baseColor.spin(120);
      const hex240 = baseColor.spin(240);
      colors = [baseColor.hex(), hex120.hex(), hex240.hex()];
      if (settings)
        settings.aliases = ["Triadic First", "Base", "Triadic Third"];
      break;
    case "Tetradic" /* Tetradic */:
      const hex90 = baseColor.spin(90);
      const hex180 = baseColor.spin(180);
      const hex270 = baseColor.spin(270);
      colors = [baseColor.hex(), hex90.hex(), hex180.hex(), hex270.hex()];
      if (settings)
        settings.aliases = ["Base", "Tetradic Second", "Tetradic Third", "Tetradic Fourth"];
      break;
    case "Random" /* Random */:
      const randomNumber = Math.round(Math.random() * 10);
      let randomColors = [];
      for (let i2 = 0; i2 < randomNumber; i2++) {
        randomColors.push(Mt.random().hex());
      }
      colors = randomColors;
      break;
  }
  return { colors, settings };
}
function generateRandomColors(combination, settings) {
  const randomHex = Mt.random();
  return generateColors(randomHex, combination, settings);
}

// src/CreatePaletteModal.ts
var CreatePaletteModal = class extends import_obsidian2.Modal {
  constructor(app, pluginSettings, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.url = "";
    this.settings = { gradient: pluginSettings.gradient, direction: pluginSettings.direction, height: pluginSettings.height, width: pluginSettings.width, aliases: [] };
    this.colors = [];
    this.colorContainers = [];
    this.combination = "Random" /* Random */;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create Palette" });
    contentEl.addClass("create-palette");
    const colorsContainer = contentEl.createEl("section");
    colorsContainer.createEl("h3").setText("Colors");
    new import_obsidian2.Setting(colorsContainer).setName("URL").setDesc("Only coolors.co & colorhunt.co are currently supported.").addText((text) => {
      text.onChange((value) => {
        this.url = value;
      });
    });
    let colorPicker = new import_obsidian2.Setting(colorsContainer).setName("Color Picker").setDesc("Use handpicked colors").addColorPicker((color) => {
      color.onChange((value) => {
        this.colors.push(value);
        this.settings.aliases.push("");
        selectedColorsContainer.style.setProperty("--selected-colors-display", this.colors.length === 0 ? "none" : "flex");
        let colorContainer = selectedColorsContainer.createEl("div");
        let colorSpan = colorContainer.createEl("span");
        colorSpan.addEventListener("click", (e2) => {
          colorSpan.contentEditable = "true";
          colorSpan.toggleClass("color-span-editable", true);
        });
        colorSpan.addEventListener("focusout", (e2) => {
          colorSpan.contentEditable = "false";
          colorSpan.toggleClass("color-span-editable", false);
          if (colorSpan.getText() !== value) {
            this.settings.aliases[this.colors.findIndex((val) => val === value)] = colorSpan.getText();
          }
        });
        colorSpan.style.borderColor = value;
        colorSpan.setText(value);
        let trash = colorContainer.createEl("button");
        (0, import_obsidian2.setIcon)(trash, "trash-2");
        trash.style.setProperty("--trash-background-color", value);
        const csColor = Mt(value);
        trash.style.setProperty("--trash-color", csColor.rgb()[0] * 0.299 + csColor.rgb()[1] * 0.587 + csColor.rgb()[2] * 0.114 > 186 ? "#000000" : "#ffffff");
        trash.addEventListener("click", (e2) => {
          const iContainers = this.colorContainers.indexOf(colorContainer);
          this.colorContainers.splice(iContainers, 1);
          const iColors = this.colors.indexOf(value);
          this.colors.splice(iColors, 1);
          selectedColorsContainer.removeChild(colorContainer);
          selectedColorsContainer.style.setProperty("--selected-colors-display", this.colors.length === 0 ? "none" : "flex");
        });
        this.colorContainers.push(colorContainer);
      });
    });
    colorPicker.controlEl.addClass("color-picker");
    let selectedColorsContainer = colorPicker.controlEl.createEl("div");
    new import_obsidian2.Setting(colorsContainer).setName("Generate Random").setDesc("Generate random colors based on color theory").addDropdown((dropdown) => {
      Object.keys(Combination).forEach((combination) => {
        dropdown.addOption(combination, combination);
      });
      dropdown.setValue(this.combination).onChange((value) => {
        const combination = value;
        this.combination = combination;
        this.colors = generateRandomColors(combination).colors;
      });
    });
    const settingsContainer = contentEl.createEl("section");
    settingsContainer.createEl("h3").setText("Settings");
    new import_obsidian2.Setting(settingsContainer).setName("Gradient").addToggle((toggle) => {
      toggle.setValue(this.settings.gradient).onChange((value) => {
        this.settings.gradient = value;
      });
    });
    new import_obsidian2.Setting(settingsContainer).setName("Direction").addDropdown((dropdown) => {
      dropdown.addOption("column" /* Column */, "column" /* Column */).addOption("row" /* Row */, "row" /* Row */).setValue(this.settings.direction.toString()).onChange((value) => {
        this.settings.direction = value;
      });
    });
    new import_obsidian2.Setting(settingsContainer).setName("Height").addText((text) => {
      text.setValue(this.settings.height.toString()).onChange((value) => {
        this.settings.height = Number(value);
      });
    });
    new import_obsidian2.Setting(settingsContainer).setName("Width").setDesc("Caution - Might cause palette to display incorrectly.").addText((text) => {
      text.setValue(this.settings.width.toString()).onChange((value) => {
        this.settings.width = Number(value);
      });
    });
    new import_obsidian2.Setting(settingsContainer).addButton(
      (button) => button.setButtonText("Create").setCta().onClick(() => {
        try {
          if (!this.url.match(urlRegex) && this.url !== "")
            throw new Error("URL provided is not valid.");
          if (this.colors.length === 0)
            this.colors = generateRandomColors("Random" /* Random */).colors;
          ;
          this.result = `${this.url.match(urlRegex) ? this.url : this.colors.toString()}
{"gradient": ${this.settings.gradient}, "direction": "${this.settings.direction}", "height": ${this.settings.height}, "aliases": ${JSON.stringify(this.settings.aliases)}}`;
          this.close();
          this.onSubmit(this.result);
        } catch (e2) {
          new import_obsidian2.Notice(e2);
        }
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/GeneratePaletteModal.ts
var import_obsidian3 = require("obsidian");
var import_validate_color = __toESM(require_lib());

// src/utils/editorUtils.ts
var EditorUtils = class {
  constructor(editor) {
    this.editor = editor;
  }
  /**
   * Replaces selection or text at the cursor
   * @param content The content to be inserted
   * @param insertAfter Inserts the content after the current line
   */
  insertContent(content, insertAfter = false) {
    this.setCursorPostCallback((line) => {
      this.editor.somethingSelected() ? this.editor.replaceSelection(content) : insertAfter ? this.insertLine(content, "after") : this.replaceLine(content, line);
    });
  }
  /**
   * Sets the cursor to a position after callback editor changes
   * @param callback Changes to perform to the editor
   * @param options.line Defaults to the current cursor line
   * @param options.offset The number of lines to offset (calculates during function unless user specified)
   */
  setCursorPostCallback(callback, { line = this.editor.getCursor().line, offset } = {}) {
    const preLinesCount = this.editor.lineCount();
    callback(line);
    const postLinesCount = this.editor.lineCount() - preLinesCount;
    offset = offset || postLinesCount;
    this.editor.setCursor({ ch: 0, line: line + offset });
  }
  /**
   * 
   * @param options.line The line to retrieve the last character index from
   * @param options.offset The offset used from the line (for example, 1 could be used to get the last character index on the line below the cursor)
   * @returns The last character's index on the line
   */
  getLastCh({ line = this.editor.getCursor().line, offset = 0 } = {}) {
    return this.editor.getLine(line + offset).length;
  }
  /**
   * Replaces a single line
   * @param content The content to replace the line with
   * @param line The line to replace
   */
  replaceLine(content, line) {
    const lineContent = this.editor.getLine(line);
    this.editor.replaceRange(content, { line, ch: 0 }, { line, ch: lineContent.length });
  }
  /**
   * Inserts content into editor before or after the line
   * @param content The content to insert
   * @param location Where to insert the content, before or after the line
   * @param options.line Defaults to cursor line
   * @param options.ch Defaults to 0
   */
  insertLine(content, location = "before", { line = this.editor.getCursor().line, ch = 0 } = {}) {
    if (location === "before") {
      this.editor.replaceRange(content, { line, ch });
    }
    if (location === "after") {
      this.editor.replaceRange(
        this.editor.lastLine() === line ? "\n" + content : content + "\n",
        { line: line + 1, ch }
      );
    }
  }
};

// src/GeneratePaletteModal.ts
var GeneratePaletteModal = class extends import_obsidian3.SuggestModal {
  constructor(app, editor, pluginSettings) {
    super(app);
    this.editor = editor;
    this.settings = { gradient: pluginSettings.gradient, direction: pluginSettings.direction, height: pluginSettings.height, width: pluginSettings.width, aliases: [] };
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    return Object.keys(Combination).filter(
      (combination) => combination.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(combination, el) {
    el.createEl("span", { text: combination });
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(combination, evt) {
    try {
      const selTextOrLine = this.editor.somethingSelected() ? this.editor.getSelection() : this.editor.getLine(this.editor.getCursor().line);
      const isLineEmpty = this.editor.getLine(this.editor.getCursor().line).length === 0;
      const isColor = (0, import_validate_color.default)(selTextOrLine);
      const { colors, settings } = isColor ? generateColors(Mt(selTextOrLine), combination, this.settings) : generateRandomColors(combination, this.settings);
      const newBlock = `\`\`\`palette
${colors.toString()}
${JSON.stringify(settings)}
\`\`\`
`;
      const editorUtils = new EditorUtils(this.editor);
      editorUtils.insertContent(newBlock, !isColor && !isLineEmpty);
    } catch (error) {
      new import_obsidian3.Notice(error);
    }
  }
};

// src/palette.ts
var import_obsidian4 = require("obsidian");
var import_validate_color2 = __toESM(require_lib());
var Palette = class extends import_obsidian4.MarkdownRenderChild {
  constructor(plugin, pluginSettings, containerEl, input) {
    super(containerEl);
    this.plugin = plugin;
    this.pluginSettings = pluginSettings;
    this.input = input;
    this.colors = [];
    this.status = "Valid" /* VALID */;
    this.setDefaultSettings();
  }
  /**
   * Set the initial default settings
   */
  setDefaultSettings() {
    this.settings = { gradient: this.pluginSettings.gradient, direction: this.pluginSettings.direction, height: this.pluginSettings.height, width: this.pluginSettings.width, aliases: [] };
  }
  /**
   * Parses input & extracts colors based on color space or URL
   * @param input colors from codeblock
   * @returns Array of colors or Status if colors are not valid
   */
  parseColors(input) {
    let colors = input.flatMap((color) => {
      if (color.includes("(")) {
        return color.split(";").flatMap((postSplitColor) => {
          return postSplitColor.trim();
        }).filter((color2) => color2.match(/\s/));
      }
      return color.split(",").flatMap((postSplitColor) => {
        return postSplitColor.trim();
      });
    }).flatMap((color) => color.trim().replace(";", ""));
    const rawColors = colors.join("");
    if (rawColors.match(urlRegex))
      return parseUrl(rawColors);
    for (let color of colors) {
      if (!(0, import_validate_color2.default)(color))
        return "Invalid Colors" /* INVALID_COLORS */;
    }
    return colors;
    function parseUrl(url) {
      var _a;
      if (url.includes("-")) {
        return url.substring(url.lastIndexOf("/") + 1).split("-").map((i2) => "#" + i2);
      } else
        return ((_a = url.substring(url.lastIndexOf("/") + 1).match(/.{1,6}/g)) == null ? void 0 : _a.map((i2) => "#" + i2)) || [];
    }
  }
  /**
   * Parses input & extracts settings
   * @param input settings from codeblock
   * @returns PaletteSettings or Status if settings are not valid
   */
  parseSettings(input) {
    try {
      return JSON.parse(input);
    } catch (error) {
      return "Invalid Settings" /* INVALID_SETTINGS */;
    }
  }
  /**
   * Calculates colors and settings based on codeblock contents
   */
  updateColorsAndSettings() {
    const split = this.input.split("\n");
    const hasSettings = split.some((val) => val.includes("{"));
    const inputColors = hasSettings ? split.slice(0, split.length - 1) : split;
    const colors = this.parseColors(inputColors);
    if (typeof colors === "string")
      this.status = colors;
    if (typeof colors === "object")
      this.colors = colors;
    const inputSettings = split.pop();
    if (hasSettings && inputSettings) {
      const settings = this.parseSettings(inputSettings);
      if (typeof settings === "string")
        this.status = this.status === "Invalid Colors" /* INVALID_COLORS */ ? "Invalid Colors & Settings" /* INVALID_COLORS_AND_SETTINGS */ : "Invalid Settings" /* INVALID_SETTINGS */;
      if (typeof settings === "object")
        this.settings = { ...this.settings, ...settings };
    }
  }
  onload() {
    var _a;
    this.updateColorsAndSettings();
    if (this.status === "Valid" /* VALID */)
      (_a = this.plugin.palettes) == null ? void 0 : _a.push(this);
    this.createPalette(this.colors, this.settings);
  }
  unload() {
    var _a;
    if (this.status === "Valid" /* VALID */)
      (_a = this.plugin.palettes) == null ? void 0 : _a.remove(this);
  }
  /**
   * Refreshes the palette contents
   */
  refresh() {
    this.setDefaultSettings();
    this.updateColorsAndSettings();
    this.containerEl.empty();
    this.createPalette(this.colors, this.settings);
  }
  /**
   * Create new palette contents based on colors & settings
   * @param colors 
   * @param settings 
   */
  createPalette(colors, settings) {
    this.containerEl.addClass("palette");
    this.containerEl.style.setProperty("--palette-direction", settings.direction === "row" /* Row */ ? "column" /* Column */ : "row" /* Row */);
    this.containerEl.style.setProperty("--not-palette-direction", settings.direction);
    this.containerEl.style.setProperty("--palette-height", `${settings.height}px`);
    try {
      if (this.status !== "Valid" /* VALID */)
        throw new PaletteError(this.status);
      this.settings.gradient ? createGradientPalette(this.containerEl, colors, settings) : createColorPalette(this.containerEl, colors, settings.height, this.pluginSettings.aliasMode);
    } catch (err) {
      if (err instanceof PaletteError)
        this.createInvalidPalette(err.status, err.message);
      else
        new import_obsidian4.Notice(err);
    }
    function createGradientPalette(containerEl, colors2, settings2) {
      if (colors2.length <= 1)
        throw new PaletteError("Invalid Gradient" /* INVALID_GRADIENT */);
      let child = containerEl.createEl("canvas");
      child.width = settings2.width;
      child.height = settings2.height;
      const tooltip = containerEl.createEl("section");
      tooltip.addClasses(["tooltip", "palette-tooltip"]);
      const tooltipText = tooltip.createEl("span");
      let context = child.getContext("2d", { willReadFrequently: true });
      if (context != null) {
        let gradient = settings2.direction === "column" /* Column */ ? context.createLinearGradient(0, 0, settings2.width, 0) : context.createLinearGradient(0, 0, 0, settings2.height);
        for (const [i2, color] of colors2.entries()) {
          gradient.addColorStop(i2 / (colors2.length - 1), color);
        }
        context.fillStyle = gradient || "#000";
        context.fillRect(0, 0, settings2.width, settings2.height);
      }
      child.addEventListener(
        "mousemove",
        (e2) => {
          const rect = child.getBoundingClientRect();
          let lrPosition = e2.clientX - rect.left > rect.width / 2 ? e2.clientX - rect.left - 56 : e2.clientX - rect.left + 64;
          tooltip.style.left = lrPosition + "px";
          let bottomPosition = rect.bottom - e2.clientY < 32 ? rect.height - 40 : e2.clientY - rect.top - 8;
          tooltip.style.top = bottomPosition + "px";
          const hex = getCanvasHex(e2, rect);
          tooltipText.setText(hex.toUpperCase());
        }
      );
      child.onClickEvent((e2) => {
        const rect = child.getBoundingClientRect();
        const hex = getCanvasHex(e2, rect);
        new import_obsidian4.Notice(`Copied ${hex.toUpperCase()}`);
        navigator.clipboard.writeText(hex.toUpperCase());
      });
      const getCanvasHex = (e2, canvasBounds) => {
        let context2 = child.getContext("2d", { willReadFrequently: true });
        let x2 = e2.clientX - canvasBounds.left;
        let y2 = e2.clientY - canvasBounds.top;
        let [r2, g2, b2, a2] = (context2 == null ? void 0 : context2.getImageData(x2, y2, 1, 1).data) || [0, 0, 0, 0];
        const aConv = Math.round(a2 / 255 * 100);
        let hex = aConv !== 255 ? Mt([r2, g2, b2, aConv]).hex() : Mt([r2, g2, b2]).hex();
        return hex;
      };
      for (const [i2, color] of Object.entries(colors2).filter((e2, i3) => i3 !== colors2.length - 1)) {
        child.toggleClass("gradient", settings2.gradient);
        child.style.setProperty("--palette-background-color", `${color}, ${colors2[Number(i2) + 1] || "transparent"}`);
        child.style.setProperty("--palette-column-flex-basis", (settings2.height / colors2.length / 2).toString() + "px");
      }
    }
    function createColorPalette(containerEl, colors2, paletteHeight, aliasMode) {
      for (const [i2, color] of colors2.entries()) {
        const csColor = Mt(color.trim());
        let child = containerEl.createEl("div");
        child.style.setProperty("--palette-background-color", color);
        child.style.setProperty("--palette-column-flex-basis", (paletteHeight / colors2.length / 2).toString() + "px");
        if (aliasMode === "Both" /* Both */ || settings.aliases[i2] == null || settings.aliases[i2].trim() === "") {
          let childText = child.createEl("span", { text: color.toUpperCase() });
          childText.style.setProperty("--palette-color", csColor.rgb()[0] * 0.299 + csColor.rgb()[1] * 0.587 + csColor.rgb()[2] * 0.114 > 186 ? "#000000" : "#ffffff");
        }
        let childAlias = child.createEl("span", { text: settings.aliases[i2] });
        childAlias.style.setProperty("--palette-color", csColor.rgb()[0] * 0.299 + csColor.rgb()[1] * 0.587 + csColor.rgb()[2] * 0.114 > 186 ? "#000000" : "#ffffff");
        child.onClickEvent((e2) => {
          new import_obsidian4.Notice(`Copied ${color}`);
          navigator.clipboard.writeText(color);
        });
      }
    }
  }
  /**
   * Create invalid palette based on palette status
   * @param type Palette status type
   * @param message Custom message
   */
  createInvalidPalette(type, message = "") {
    this.containerEl.style.setProperty("--palette-height", "150px");
    const invalidSection = this.containerEl.createEl("section");
    invalidSection.toggleClass("invalid", true);
    const invalidSpan = invalidSection.createEl("span");
    const colors = this.colors.toString() !== "" ? this.colors.toString() : this.input;
    const split = this.input.split("\n");
    const settings = split[split.length - 1];
    switch (type) {
      case "Invalid Colors" /* INVALID_COLORS */:
        invalidSpan.setText("Invalid Colors" /* INVALID_COLORS */);
        new import_obsidian4.Notice(message ? message : `Palette:
Colors are defined incorrectly
${colors}`, this.pluginSettings.noticeDuration);
        break;
      case "Invalid Settings" /* INVALID_SETTINGS */:
        invalidSpan.setText("Invalid Settings" /* INVALID_SETTINGS */);
        new import_obsidian4.Notice(message ? message : `Palette:
Issues parsing settings
${settings}`, this.pluginSettings.noticeDuration);
        break;
      case "Invalid Colors & Settings" /* INVALID_COLORS_AND_SETTINGS */:
        invalidSpan.setText("Invalid Colors & Settings" /* INVALID_COLORS_AND_SETTINGS */);
        new import_obsidian4.Notice(message ? message : `Palette:
Colors and settings are defined incorrectly
${this.input}`, this.pluginSettings.noticeDuration);
        break;
      case "Invalid Gradient" /* INVALID_GRADIENT */:
        invalidSpan.setText("Invalid Gradient" /* INVALID_GRADIENT */);
        new import_obsidian4.Notice(message ? message : `Palette:
Gradients require more than 1 color to display
${colors}`, this.pluginSettings.noticeDuration);
    }
    if (this.pluginSettings.errorPulse) {
      this.containerEl.style.setProperty("--notice-duration", (this.pluginSettings.noticeDuration / 1e3 / 2).toString() + "s");
      this.containerEl.toggleClass("palette-pulse", true);
      setTimeout(() => this.containerEl.toggleClass("palette-pulse", false), this.pluginSettings.noticeDuration);
    }
  }
};
var PaletteError = class extends Error {
  constructor(status, message = "") {
    super(message);
    this.status = status;
  }
};

// src/main.ts
var urlRegex = /(?:https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}(?:\.[a-zA-Z0-9]{2,})(?:\.[a-zA-Z0-9]{2,})?\/palette\/([a-zA-Z0-9-]{2,})/;
var ColorPalette2 = class extends import_obsidian5.Plugin {
  async onload() {
    this.palettes = [];
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor(
      "palette",
      async (source, el, ctx) => {
        ctx.addChild(new Palette(this, this.settings, el, source.trim()));
      }
    );
    this.addCommand({
      id: "create",
      name: "Create",
      editorCallback: (editor) => {
        new CreatePaletteModal(this.app, this.settings, (result) => {
          try {
            const codeBlock = `\`\`\`palette
${result}
\`\`\`
`;
            const cursor = editor.getCursor();
            editor.transaction({
              changes: [{ from: cursor, text: codeBlock }]
            });
            editor.setCursor({
              line: cursor.line + codeBlock.split("\n").length,
              ch: 0
            });
            new import_obsidian5.Notice(`Added ${result}`);
          } catch (error) {
            new import_obsidian5.Notice(error);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "convert-link",
      name: "Convert link",
      editorCallback: (editor) => {
        try {
          const link = editor.getSelection();
          if (!link.match(`^${urlRegex.source}$`))
            throw new Error("Selected text is not a link.");
          const codeBlock = `\`\`\`palette
${link}
\`\`\`
`;
          const cursor = editor.getCursor();
          editor.replaceSelection(codeBlock);
          editor.setCursor({
            line: cursor.line + codeBlock.split("\n").length,
            ch: 0
          });
          new import_obsidian5.Notice(`Converted ${editor.getSelection()}`);
        } catch (error) {
          new import_obsidian5.Notice(error);
        }
      }
    });
    this.addCommand({
      id: "convert-codeblock-link-to-hex",
      name: "Convert codeblock link to hex",
      editorCallback: (editor) => {
        var _a, _b, _c;
        try {
          const codeBlock = editor.getSelection();
          const multiReg = RegExp(/(?:\`{3}palette)\n(?<url>.*)(?:\n(?<settings>.+))?\n\`{3}/, "g");
          const content = (_b = (_a = [...codeBlock.matchAll(multiReg)]) == null ? void 0 : _a[0]) == null ? void 0 : _b.slice(1);
          const url = content == null ? void 0 : content[0];
          if (url == null)
            throw new Error("Selected text is not a codeblock with a link.");
          let colors = [];
          url.match(urlRegex) && url.includes("-") ? colors = url.substring(url.lastIndexOf("/") + 1).split("-").map((i2) => "#" + i2) : (
            // Check if link (colorhunt)
            url.match(urlRegex) ? colors = ((_c = url.substring(url.lastIndexOf("/") + 1).match(/.{1,6}/g)) == null ? void 0 : _c.map((i2) => "#" + i2)) || ["Invalid Palette"] : colors = ["Invalid Palette"]
          );
          if (colors[0] === "Invalid Palette")
            throw new Error("Selected codeblock can not be converted to hex.");
          const newBlock = `\`\`\`palette
${colors.toString()}${(content == null ? void 0 : content[1]) ? "\n" + content[1] : ""}
\`\`\``;
          editor.replaceSelection(newBlock);
          new import_obsidian5.Notice(`Converted codeblock link to hex`);
        } catch (error) {
          new import_obsidian5.Notice(error);
        }
      }
    });
    this.addCommand({
      id: "generate-random-palette",
      name: "Generate random palette",
      editorCallback: (editor) => {
        new GeneratePaletteModal(this.app, editor, this.settings).open();
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,

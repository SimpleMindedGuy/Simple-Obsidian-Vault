/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// CreationModal.ts
var import_obsidian2 = __toModule(require("obsidian"));

// ErrorModal.ts
var import_obsidian = __toModule(require("obsidian"));
var ErrorModal = class extends import_obsidian.Modal {
  constructor(app, error) {
    super(app);
    this.error = error;
  }
  onOpen() {
    this.contentEl.createEl("h1", { text: this.error.message });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// CreationModal.ts
var _CreationModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.matrixWidth = 2;
    this.matrixHeight = 2;
    this.selectedMatrix = "Plain (matrix)";
    this.MAX_WIDTH = 10;
    this.MAX_HEIGHT = 10;
    this.keyEventHandler = (evt) => {
      const widthSliderComponent = this.widthSlider.components[0];
      const heightSliderComponent = this.heightSlider.components[0];
      if (evt.key == "Enter") {
        this.constructOutput();
      } else if (evt.key == "ArrowRight" && evt.altKey && this.matrixWidth < this.MAX_WIDTH) {
        this.matrixWidth += 1;
        widthSliderComponent.setValue(this.matrixWidth);
        this.regenerateMatrix();
        const firstTextBox = this.matrixDiv.children[0];
        firstTextBox.focus();
      } else if (evt.key == "ArrowLeft" && evt.altKey && this.matrixWidth > 1) {
        this.matrixWidth -= 1;
        widthSliderComponent.setValue(this.matrixWidth);
        this.regenerateMatrix();
        const firstTextBox = this.matrixDiv.children[0];
        firstTextBox.focus();
      } else if (evt.key == "ArrowUp" && evt.altKey && this.matrixHeight > 1) {
        this.matrixHeight -= 1;
        heightSliderComponent.setValue(this.matrixHeight);
        this.regenerateMatrix();
        const firstTextBox = this.matrixDiv.children[0];
        firstTextBox.focus();
      } else if (evt.key == "ArrowDown" && evt.altKey && this.matrixHeight < this.MAX_HEIGHT) {
        this.matrixHeight += 1;
        heightSliderComponent.setValue(this.matrixHeight);
        this.regenerateMatrix();
        const firstTextBox = this.matrixDiv.children[0];
        firstTextBox.focus();
      }
    };
    this.parentPlugin = plugin;
  }
  onOpen() {
    this.createHTML();
    new import_obsidian2.Setting(this.settingsDiv).setName("Matrix type").addDropdown((dc) => {
      Object.keys(_CreationModal.matrixTypes).forEach((key) => {
        dc.addOption(key, key);
      });
      dc.onChange((value) => {
        this.selectedMatrix = value;
      });
      if (this.parentPlugin.settings.rememberMatrixType && this.parentPlugin.settings.lastUsedMatrix) {
        dc.setValue(this.parentPlugin.settings.lastUsedMatrix);
        this.selectedMatrix = this.parentPlugin.settings.lastUsedMatrix;
      }
    });
    this.widthSlider = new import_obsidian2.Setting(this.settingsDiv).setName("Matrix width").addSlider((slider) => {
      if (this.parentPlugin.settings.rememberMatrixDimensions) {
        slider.setValue(this.parentPlugin.settings.prevX == null ? 2 : this.parentPlugin.settings.prevX);
        this.matrixWidth = this.parentPlugin.settings.prevX == null ? 2 : this.parentPlugin.settings.prevX;
      } else {
        slider.setValue(2);
      }
      slider.setLimits(1, this.MAX_WIDTH, 1);
      slider.showTooltip();
      slider.setDynamicTooltip();
      slider.onChange((value) => {
        this.matrixWidth = value;
        this.regenerateMatrix();
      });
    });
    this.heightSlider = new import_obsidian2.Setting(this.settingsDiv).setName("Matrix height").addSlider((slider) => {
      if (this.parentPlugin.settings.rememberMatrixDimensions) {
        slider.setValue(this.parentPlugin.settings.prevY == null ? 2 : this.parentPlugin.settings.prevY);
        this.matrixHeight = this.parentPlugin.settings.prevY == null ? 2 : this.parentPlugin.settings.prevY;
      } else {
        slider.setValue(2);
      }
      slider.setLimits(1, this.MAX_HEIGHT, 1);
      slider.showTooltip();
      slider.setDynamicTooltip();
      slider.onChange((value) => {
        this.matrixHeight = value;
        this.regenerateMatrix();
      });
    });
    new import_obsidian2.Setting(this.settingsDiv).setName("Create").addButton((button) => {
      button.setIcon("checkmark");
      button.setCta();
      button.onClick(() => {
        this.constructOutput();
      });
    });
    this.parentDiv.addEventListener("keyup", this.keyEventHandler);
    this.createInputs();
    this.applyCorrectStyle();
  }
  onClose() {
    this.contentEl.empty();
  }
  constructOutput() {
    if (this.parentPlugin.settings.rememberMatrixType) {
      this.parentPlugin.settings.lastUsedMatrix = this.selectedMatrix;
      this.parentPlugin.saveSettings();
    }
    if (this.parentPlugin.settings.rememberMatrixDimensions) {
      this.parentPlugin.settings.prevX = this.matrixWidth;
      this.parentPlugin.settings.prevY = this.matrixHeight;
      this.parentPlugin.saveSettings();
    }
    const chunks = Array.from(this.matrixDiv.children).map((child) => {
      return child.value;
    }).reduce((resultArray, item, index) => {
      const chunkIndex = Math.floor(index / this.matrixWidth);
      if (!resultArray[chunkIndex]) {
        resultArray[chunkIndex] = [];
      }
      resultArray[chunkIndex].push(item);
      return resultArray;
    }, []);
    const latexString = chunks.map((chunk) => {
      return chunk.join(" & ");
    }).join(this.parentPlugin.settings.inline ? " \\\\" : " \\\\\n");
    if (this.parentPlugin.settings.inline) {
      this.writeAtCursor(`\\begin{${_CreationModal.matrixTypes[this.selectedMatrix]}}${latexString}\\end{${_CreationModal.matrixTypes[this.selectedMatrix]}}`);
    } else {
      this.writeAtCursor(`\\begin{${_CreationModal.matrixTypes[this.selectedMatrix]}}
${latexString}
\\end{${_CreationModal.matrixTypes[this.selectedMatrix]}}`);
    }
    this.close();
  }
  createHTML() {
    this.parentDiv = this.contentEl.createEl("div", { cls: "parentDiv" });
    this.settingsDiv = this.parentDiv.createEl("div", { cls: "settingsDiv" });
    this.matrixDiv = this.parentDiv.createEl("div", { cls: "matrixDiv" });
  }
  applyCorrectStyle() {
    this.matrixDiv.style.gridTemplateColumns = `repeat(${this.matrixWidth}, 1fr)`;
    this.matrixDiv.style.gridTemplateRows = `repeat(${this.matrixHeight}, 1fr)`;
  }
  createInputs() {
    for (let i = 0; i < this.matrixWidth * this.matrixHeight; i++) {
      this.matrixDiv.createEl("input", { type: "text", cls: "matrixInput" });
    }
  }
  regenerateMatrix() {
    this.matrixDiv.empty();
    this.createInputs();
    this.applyCorrectStyle();
  }
  writeAtCursor(toWrite) {
    const mdView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (mdView) {
      mdView.editor.replaceRange(toWrite, mdView.editor.getCursor());
    } else {
      this.close();
      new ErrorModal(this.app, new Error("No markdown view open")).open();
    }
  }
};
var CreationModal = _CreationModal;
CreationModal.matrixTypes = {
  "Plain (matrix)": "matrix",
  "Parentheses (pmatrix)": "pmatrix",
  "Square brackets (bmatrix)": "bmatrix",
  "Curly braces (Bmatrix)": "BMatrix",
  "Pipes (vmatrix)": "vmatrix",
  "Double Pipes (Vmatrix)": "Vmatrix"
};

// settings.ts
var import_obsidian3 = __toModule(require("obsidian"));
var MatrixSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Remember previous matrix type").setDesc('After choosing a matrix type and clicking "Create", the type will be selected by default the next time you open the matrix creation window.').addToggle((toggle) => toggle.setValue(this.plugin.settings.rememberMatrixType).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.rememberMatrixType = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Remember previous matrix dimensions").setDesc('After entering a matrix and clicking "Create", the dimensions will be selected by default the next time you open the matrix creation window.').addToggle((toggle) => toggle.setValue(this.plugin.settings.rememberMatrixDimensions).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.rememberMatrixDimensions = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Put matrix command on one line").setDesc("Rather than inserting a newline after each row of the matrix, all text will be placed on one line. This will allow the matrix to immediately work between inline (single) $-signs, as well as multiline $$-signs.").addToggle((toggle) => toggle.setValue(this.plugin.settings.inline).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.inline = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  rememberMatrixType: true,
  rememberMatrixDimensions: true,
  inline: false,
  lastUsedMatrix: "",
  prevX: null,
  prevY: null
};
var MyPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addRibbonIcon("pane-layout", "Obsidian Matrix", () => {
        new CreationModal(this.app, this).open();
      });
      this.addCommand({
        id: "obsidian-matrix-shortcut",
        name: "Open Obsidian Matrix menu",
        hotkeys: [],
        callback: () => {
          new CreationModal(this.app, this).open();
        }
      });
      yield this.loadSettings();
      this.addSettingTab(new MatrixSettingTab(this.app, this));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
